[
  {
    "name": "[B",
    "methods": [
      {
        "name": "toChallenge",
        "parameterTypes": []
      },
      {
        "name": "toChallengeOption",
        "parameterTypes": []
      },
      {
        "name": "toCity",
        "parameterTypes": []
      },
      {
        "name": "toCountry",
        "parameterTypes": []
      },
      {
        "name": "toSubscribedChannel",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "[I"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.deser.BeanDeserializerModifier;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.deser.Deserializers;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.deser.KeyDeserializers;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.deser.ValueInstantiators;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.ser.BeanSerializerModifier;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.ser.Serializers;"
  },
  {
    "name": "[Lcom.fasterxml.jackson.databind.type.TypeModifier;"
  },
  {
    "name": "[Ldiscord4j.discordjson.json.ApplicationCommandData;"
  },
  {
    "name": "[Ljava.lang.Class;"
  },
  {
    "name": "[Ljava.lang.String;"
  },
  {
    "name": "[Lorg.springframework.core.io.Resource;",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "[Lorg.springframework.util.ConcurrentReferenceHashMap$Segment;"
  },
  {
    "name": "[Lorg.springframework.web.bind.annotation.RequestMethod;"
  },
  {
    "name": "[Lsun.security.pkcs.SignerInfo;"
  },
  {
    "name": "[Z"
  },
  {
    "name": "apple.security.AppleProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "boolean",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "java.lang.Boolean"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "java.lang.Boolean"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "java.lang.Boolean"
        ]
      }
    ]
  },
  {
    "name": "byte",
    "methods": [
      {
        "name": "toChallenge",
        "parameterTypes": []
      },
      {
        "name": "toChallengeOption",
        "parameterTypes": []
      },
      {
        "name": "toCity",
        "parameterTypes": []
      },
      {
        "name": "toCountry",
        "parameterTypes": []
      },
      {
        "name": "toSubscribedChannel",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.BasicConfigurator",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.LoggerContext"
  },
  {
    "name": "ch.qos.logback.classic.joran.SerializedModelConfigurator",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.DateConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.LevelConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.LineSeparatorConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.LoggerConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.MessageConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.pattern.ThreadConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "ch.qos.logback.classic.util.DefaultJoranConfigurator",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.aayushatharva.brotli4j.Brotli4jLoader"
  },
  {
    "name": "com.fasterxml.aalto.AsyncXMLStreamReader"
  },
  {
    "name": "com.fasterxml.jackson.core.JsonGenerator"
  },
  {
    "name": "com.fasterxml.jackson.core.ObjectCodec",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "getJsonFactory",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.core.TreeCodec",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "com.fasterxml.jackson.core.Versioned",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "com.fasterxml.jackson.databind.Module",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "getDependencies",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.databind.ObjectMapper",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "createArrayNode",
        "parameterTypes": []
      },
      {
        "name": "createObjectNode",
        "parameterTypes": []
      },
      {
        "name": "getFactory",
        "parameterTypes": []
      },
      {
        "name": "missingNode",
        "parameterTypes": []
      },
      {
        "name": "nullNode",
        "parameterTypes": []
      },
      {
        "name": "readTree",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser"
        ]
      },
      {
        "name": "readValue",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "com.fasterxml.jackson.core.type.ResolvedType"
        ]
      },
      {
        "name": "readValue",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "com.fasterxml.jackson.core.type.TypeReference"
        ]
      },
      {
        "name": "readValue",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "java.lang.Class"
        ]
      },
      {
        "name": "readValues",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "com.fasterxml.jackson.core.type.ResolvedType"
        ]
      },
      {
        "name": "readValues",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "com.fasterxml.jackson.core.type.TypeReference"
        ]
      },
      {
        "name": "readValues",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonParser",
          "java.lang.Class"
        ]
      },
      {
        "name": "treeAsTokens",
        "parameterTypes": [
          "com.fasterxml.jackson.core.TreeNode"
        ]
      },
      {
        "name": "treeToValue",
        "parameterTypes": [
          "com.fasterxml.jackson.core.TreeNode",
          "java.lang.Class"
        ]
      },
      {
        "name": "version",
        "parameterTypes": []
      },
      {
        "name": "writeTree",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonGenerator",
          "com.fasterxml.jackson.core.TreeNode"
        ]
      },
      {
        "name": "writeValue",
        "parameterTypes": [
          "com.fasterxml.jackson.core.JsonGenerator",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.databind.module.SimpleModule",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "addAbstractTypeMapping",
        "parameterTypes": [
          "java.lang.Class",
          "java.lang.Class"
        ]
      },
      {
        "name": "addDeserializer",
        "parameterTypes": [
          "java.lang.Class",
          "com.fasterxml.jackson.databind.JsonDeserializer"
        ]
      },
      {
        "name": "addKeyDeserializer",
        "parameterTypes": [
          "java.lang.Class",
          "com.fasterxml.jackson.databind.KeyDeserializer"
        ]
      },
      {
        "name": "addKeySerializer",
        "parameterTypes": [
          "java.lang.Class",
          "com.fasterxml.jackson.databind.JsonSerializer"
        ]
      },
      {
        "name": "addSerializer",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.JsonSerializer"
        ]
      },
      {
        "name": "addSerializer",
        "parameterTypes": [
          "java.lang.Class",
          "com.fasterxml.jackson.databind.JsonSerializer"
        ]
      },
      {
        "name": "addValueInstantiator",
        "parameterTypes": [
          "java.lang.Class",
          "com.fasterxml.jackson.databind.deser.ValueInstantiator"
        ]
      },
      {
        "name": "getModuleName",
        "parameterTypes": []
      },
      {
        "name": "getTypeId",
        "parameterTypes": []
      },
      {
        "name": "registerSubtypes",
        "parameterTypes": [
          "java.util.Collection"
        ]
      },
      {
        "name": "registerSubtypes",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.jsontype.NamedType[]"
        ]
      },
      {
        "name": "registerSubtypes",
        "parameterTypes": [
          "java.lang.Class[]"
        ]
      },
      {
        "name": "setAbstractTypes",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver"
        ]
      },
      {
        "name": "setDeserializerModifier",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.deser.BeanDeserializerModifier"
        ]
      },
      {
        "name": "setDeserializers",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleDeserializers"
        ]
      },
      {
        "name": "setKeyDeserializers",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleKeyDeserializers"
        ]
      },
      {
        "name": "setKeySerializers",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleSerializers"
        ]
      },
      {
        "name": "setMixInAnnotation",
        "parameterTypes": [
          "java.lang.Class",
          "java.lang.Class"
        ]
      },
      {
        "name": "setSerializerModifier",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.ser.BeanSerializerModifier"
        ]
      },
      {
        "name": "setSerializers",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleSerializers"
        ]
      },
      {
        "name": "setValueInstantiators",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.module.SimpleValueInstantiators"
        ]
      },
      {
        "name": "version",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.dataformat.cbor.CBORFactory"
  },
  {
    "name": "com.fasterxml.jackson.dataformat.smile.SmileFactory"
  },
  {
    "name": "com.fasterxml.jackson.dataformat.xml.XmlMapper"
  },
  {
    "name": "com.fasterxml.jackson.datatype.jdk8.Jdk8Module",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.datatype.jsr310.JavaTimeModule",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.fasterxml.jackson.module.paramnames.ParameterNamesModule",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setupModule",
        "parameterTypes": [
          "com.fasterxml.jackson.databind.Module$SetupContext"
        ]
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.BBHeader$ReadAndWriteCounterRef",
    "fields": [
      {
        "name": "writeCounter"
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.BBHeader$ReadCounterRef",
    "fields": [
      {
        "name": "readCounter"
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.BLCHeader$DrainStatusRef",
    "fields": [
      {
        "name": "drainStatus"
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueueColdProducerFields",
    "fields": [
      {
        "name": "producerLimit"
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueueConsumerFields",
    "fields": [
      {
        "name": "consumerIndex"
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.BaseMpscLinkedArrayQueueProducerFields",
    "fields": [
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.BoundedLocalCache",
    "fields": [
      {
        "name": "refreshes"
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.PS",
    "fields": [
      {
        "name": "key"
      },
      {
        "name": "value"
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.PSMS",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.PW",
    "fields": [
      {
        "name": "value"
      }
    ],
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.SI",
    "fields": [
      {
        "name": "FACTORY"
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.SSLMS",
    "fields": [
      {
        "name": "FACTORY"
      }
    ]
  },
  {
    "name": "com.github.benmanes.caffeine.cache.StripedBuffer",
    "fields": [
      {
        "name": "tableBusy"
      }
    ]
  },
  {
    "name": "com.github.luben.zstd.Zstd"
  },
  {
    "name": "com.google.common.base.Optional"
  },
  {
    "name": "com.google.gson.Gson"
  },
  {
    "name": "com.google.protobuf.Message"
  },
  {
    "name": "com.samskivert.mustache.Template"
  },
  {
    "name": "com.sun.crypto.provider.AESCipher$General",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.ARCFOURCipher",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.ChaCha20Cipher$ChaCha20Poly1305",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.DESCipher",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.DESedeCipher",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.DHParameters",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.GaloisCounterMode$AESGCM",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.HmacCore$HmacSHA256",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.HmacCore$HmacSHA384",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.HmacSHA1",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.PBKDF2Core$HmacSHA256",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.crypto.provider.TlsMasterSecretGenerator",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.sun.xml.internal.stream.XMLInputFactoryImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.uploadcare.api.Client",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "close",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.uploadcare.api.File$Audio",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "com.uploadcare.api.File$ColorMode",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "com.uploadcare.api.File$GeoLocation",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "com.uploadcare.api.File$ImageInfo",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.uploadcare.api.File$Video",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "com.uploadcare.api.File$VideoInfo",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "com.uploadcare.data.FileData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "com.uploadcare.data.UploadBaseData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.WorldleApiApplication",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "main",
        "parameterTypes": [
          "java.lang.String[]"
        ]
      },
      {
        "name": "setBeanFactory",
        "parameterTypes": [
          "org.springframework.beans.factory.BeanFactory"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.WorldleApiApplication$$SpringCGLIB$$0",
    "allDeclaredFields": true,
    "fields": [
      {
        "name": "CGLIB$FACTORY_DATA"
      }
    ],
    "methods": [
      {
        "name": "CGLIB$SET_STATIC_CALLBACKS",
        "parameterTypes": [
          "org.springframework.cglib.proxy.Callback[]"
        ]
      },
      {
        "name": "CGLIB$SET_THREAD_CALLBACKS",
        "parameterTypes": [
          "org.springframework.cglib.proxy.Callback[]"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.WorldleApiApplication__ApplicationContextInitializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.ClockConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "setBeanFactory",
        "parameterTypes": [
          "org.springframework.beans.factory.BeanFactory"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.ClockConfiguration$$SpringCGLIB$$0",
    "allDeclaredFields": true,
    "fields": [
      {
        "name": "CGLIB$FACTORY_DATA"
      }
    ],
    "methods": [
      {
        "name": "CGLIB$SET_STATIC_CALLBACKS",
        "parameterTypes": [
          "org.springframework.cglib.proxy.Callback[]"
        ]
      },
      {
        "name": "CGLIB$SET_THREAD_CALLBACKS",
        "parameterTypes": [
          "org.springframework.cglib.proxy.Callback[]"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.ClockConfiguration$$SpringCGLIB$$FastClass$$0",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.ClockConfiguration$$SpringCGLIB$$FastClass$$1",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.SchedulerConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "setBeanFactory",
        "parameterTypes": [
          "org.springframework.beans.factory.BeanFactory"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.SchedulerConfiguration$$SpringCGLIB$$0",
    "allDeclaredFields": true,
    "fields": [
      {
        "name": "CGLIB$FACTORY_DATA"
      }
    ],
    "methods": [
      {
        "name": "CGLIB$SET_STATIC_CALLBACKS",
        "parameterTypes": [
          "org.springframework.cglib.proxy.Callback[]"
        ]
      },
      {
        "name": "CGLIB$SET_THREAD_CALLBACKS",
        "parameterTypes": [
          "org.springframework.cglib.proxy.Callback[]"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.SchedulerConfiguration$$SpringCGLIB$$FastClass$$0",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.SchedulerConfiguration$$SpringCGLIB$$FastClass$$1",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.UploadcareIntegrationConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "setBeanFactory",
        "parameterTypes": [
          "org.springframework.beans.factory.BeanFactory"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.UploadcareIntegrationConfiguration$$SpringCGLIB$$0",
    "allDeclaredFields": true,
    "fields": [
      {
        "name": "CGLIB$FACTORY_DATA"
      }
    ],
    "methods": [
      {
        "name": "CGLIB$SET_STATIC_CALLBACKS",
        "parameterTypes": [
          "org.springframework.cglib.proxy.Callback[]"
        ]
      },
      {
        "name": "CGLIB$SET_THREAD_CALLBACKS",
        "parameterTypes": [
          "org.springframework.cglib.proxy.Callback[]"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.UploadcareIntegrationConfiguration$$SpringCGLIB$$FastClass$$0",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.configuration.UploadcareIntegrationConfiguration$$SpringCGLIB$$FastClass$$1",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.controller.ChallengeController",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.service.ChallengeService",
          "dev.vrba.discord.worldle.api.mapper.ChallengeMapper"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.discord.DiscordBot",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.util.List"
        ]
      },
      {
        "name": "run",
        "parameterTypes": [
          "org.springframework.boot.ApplicationArguments"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.discord.DiscordBotModule",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "dev.vrba.discord.worldle.api.discord.modules.ApplicationCommandsModule",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.service.SubscribedChannelService"
        ]
      },
      {
        "name": "register",
        "parameterTypes": [
          "discord4j.core.GatewayDiscordClient"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.discord.modules.DailyChallengesModule",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.time.Clock",
          "org.springframework.scheduling.TaskScheduler",
          "dev.vrba.discord.worldle.api.service.ChallengeService",
          "dev.vrba.discord.worldle.api.service.SubscribedChannelService"
        ]
      },
      {
        "name": "register",
        "parameterTypes": [
          "discord4j.core.GatewayDiscordClient"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.discord.modules.GuessInteractionsModule",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.service.GuessService",
          "dev.vrba.discord.worldle.api.service.ChallengeService",
          "dev.vrba.discord.worldle.api.service.SubscribedChannelService"
        ]
      },
      {
        "name": "register",
        "parameterTypes": [
          "discord4j.core.GatewayDiscordClient"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.mapper.ChallengeMapper",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "dev.vrba.discord.worldle.api.mapper.ChallengeMapperImpl",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "challengeOptionToChallengeOptionDto",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.model.ChallengeOption"
        ]
      },
      {
        "name": "challengeToChallengeDto",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.model.Challenge"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.Challenge",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "<init>",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "byte[]"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.ChallengeOption",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "<init>",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "byte[]"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.ChallengeOption_Accessor_2jxqwx",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.model.ChallengeOption"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.ChallengeOption_Instantiator_2jxqwx",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.Challenge_Accessor_z0wegs",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.model.Challenge"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.Challenge_Instantiator_z0wegs",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.City",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "<init>",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "byte[]"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.City_Accessor_khdw19",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.model.City"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.City_Instantiator_khdw19",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.Country",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "<init>",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "byte[]"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.Country_Accessor_vllt67",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.model.Country"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.Country_Instantiator_vllt67",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.Guess",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.Guess_Accessor_n7an4j",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.model.Guess"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.SubscribedChannel",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "<init>",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "byte"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "byte[]"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.SubscribedChannel_Accessor_wurj7j",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.model.SubscribedChannel"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.model.SubscribedChannel_Instantiator_wurj7j",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.repository.RedisChallengeRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "findByDate",
        "parameterTypes": [
          "java.time.LocalDate"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.repository.RedisGuessRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "findByChallengeDateAndUser",
        "parameterTypes": [
          "java.time.LocalDate",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.repository.SubscribedChannelRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "dev.vrba.discord.worldle.api.security.SecurityConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "setBeanFactory",
        "parameterTypes": [
          "org.springframework.beans.factory.BeanFactory"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.security.SecurityConfiguration$$SpringCGLIB$$0",
    "allDeclaredFields": true,
    "fields": [
      {
        "name": "CGLIB$FACTORY_DATA"
      }
    ],
    "methods": [
      {
        "name": "CGLIB$SET_STATIC_CALLBACKS",
        "parameterTypes": [
          "org.springframework.cglib.proxy.Callback[]"
        ]
      },
      {
        "name": "CGLIB$SET_THREAD_CALLBACKS",
        "parameterTypes": [
          "org.springframework.cglib.proxy.Callback[]"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.security.SecurityConfiguration$$SpringCGLIB$$FastClass$$0",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.security.SecurityConfiguration$$SpringCGLIB$$FastClass$$1",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.ChallengeService",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "findOrCreateChallengeByDate",
        "parameterTypes": [
          "java.time.LocalDate"
        ]
      },
      {
        "name": "findOrCreateChallengeForToday",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.CountryService",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.GuessService",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.ImageLookupService",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.ImageStorageService",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.SubscribedChannelService",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.impl.GooglePlacesImageLookupService",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getChallengeImageByCity",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.model.City"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.impl.GooglePlacesImageLookupService$GooglePlacesApiCandidate",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.impl.GooglePlacesImageLookupService$GooglePlacesApiPhoto",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.impl.GooglePlacesImageLookupService$GooglePlacesApiResponse",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.impl.RedisChallengeService",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.time.Clock",
          "dev.vrba.discord.worldle.api.repository.RedisChallengeRepository",
          "dev.vrba.discord.worldle.api.service.CountryService",
          "dev.vrba.discord.worldle.api.service.ImageLookupService",
          "dev.vrba.discord.worldle.api.service.ImageStorageService"
        ]
      },
      {
        "name": "createChallenge",
        "parameterTypes": [
          "java.time.LocalDate"
        ]
      },
      {
        "name": "createChallengeForToday",
        "parameterTypes": []
      },
      {
        "name": "findChallengeByDate",
        "parameterTypes": [
          "java.time.LocalDate"
        ]
      },
      {
        "name": "findChallengeForToday",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.impl.RedisGuessService",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.time.Clock",
          "dev.vrba.discord.worldle.api.repository.RedisGuessRepository"
        ]
      },
      {
        "name": "findGuessForDate",
        "parameterTypes": [
          "java.time.LocalDate",
          "java.lang.String"
        ]
      },
      {
        "name": "findGuessForToday",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "recordGuessForDate",
        "parameterTypes": [
          "java.time.LocalDate",
          "java.lang.String",
          "int"
        ]
      },
      {
        "name": "recordGuessForToday",
        "parameterTypes": [
          "java.lang.String",
          "int"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.impl.RedisSubscribedChannelService",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.repository.SubscribedChannelRepository"
        ]
      },
      {
        "name": "getSubscribedChannels",
        "parameterTypes": []
      },
      {
        "name": "subscribe",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "unsubscribe",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.impl.ResourceCountryService",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.core.io.ResourceLoader"
        ]
      },
      {
        "name": "getRandomCity",
        "parameterTypes": [
          "dev.vrba.discord.worldle.api.model.Country"
        ]
      },
      {
        "name": "getShuffledCountries",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "dev.vrba.discord.worldle.api.service.impl.UploadcareImageStorageService",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.uploadcare.api.Client"
        ]
      },
      {
        "name": "uploadChallengeImage",
        "parameterTypes": [
          "byte[]",
          "java.time.LocalDate"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.Id",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "asString",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.Activity",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ActivityAssetsData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ActivityData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ActivityEmojiData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ActivityPartyData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ActivitySecretsData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ActivityTimestampsData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ApplicationCommandData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ApplicationCommandInteractionData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ApplicationCommandInteractionOptionData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ApplicationCommandInteractionResolvedData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ApplicationCommandOptionChoiceData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ApplicationCommandOptionData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ApplicationCommandRequest",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ApplicationInfoData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ApplicationTeamData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ApplicationTeamMemberData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.AttachmentData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ChannelData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ChannelMentionData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ClientStatusData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ComponentData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.EmbedAuthorData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.EmbedData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.EmbedFieldData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.EmbedFooterData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.EmbedImageData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.EmbedProviderData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.EmbedThumbnailData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.EmbedVideoData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.EmojiData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.GatewayData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.GuildCreateData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.GuildCreateFields",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.GuildFields",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.GuildNsfwLevelField",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.GuildRolesEmojisStickersFields",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.GuildUpdateFields",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.GuildVerificationLevelField",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivityAssetsData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivityAssetsData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivityData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivityData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivityEmojiData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivityEmojiData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivityPartyData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivityPartyData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivitySecretsData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivitySecretsData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivityTimestampsData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableActivityTimestampsData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableApplicationCommandData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setApplicationId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setDefaultMemberPermissions",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setDescription",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setDescriptionLocalizations",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setDmPermission",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setNameLocalizations",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setType",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setVersion",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandInteractionData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableApplicationCommandInteractionData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandInteractionData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setComponentType",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setCustomId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setName",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setType",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandInteractionOptionData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandInteractionOptionData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandInteractionResolvedData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandInteractionResolvedData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandOptionChoiceData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandOptionChoiceData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandOptionData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandOptionData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationCommandRequest",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "defaultMemberPermissions",
        "parameterTypes": []
      },
      {
        "name": "defaultPermission",
        "parameterTypes": []
      },
      {
        "name": "description",
        "parameterTypes": []
      },
      {
        "name": "descriptionLocalizations",
        "parameterTypes": []
      },
      {
        "name": "dmPermission",
        "parameterTypes": []
      },
      {
        "name": "name",
        "parameterTypes": []
      },
      {
        "name": "nameLocalizations",
        "parameterTypes": []
      },
      {
        "name": "options",
        "parameterTypes": []
      },
      {
        "name": "type",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationInfoData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableApplicationInfoData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationInfoData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setBotPublic",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setBotRequireCodeGrant",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setDescription",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setFlags",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setIcon",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setOwner",
        "parameterTypes": [
          "discord4j.discordjson.json.UserData"
        ]
      },
      {
        "name": "setSummary",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setTeam",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setVerifyKey",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationTeamData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationTeamData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationTeamMemberData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableApplicationTeamMemberData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableAttachmentData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableAttachmentData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableChannelData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableChannelData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableChannelData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setBitrate",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setGuildId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setLastMessageId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setLastPinTimestamp",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setName",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setNsfw",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setParentId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setPermissionOverwrites",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setPosition",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setRateLimitPerUser",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setRtcRegion",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setTopic",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setType",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setUserLimit",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableChannelMentionData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableChannelMentionData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableClientStatusData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableClientStatusData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableComponentData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "channelTypes",
        "parameterTypes": []
      },
      {
        "name": "components",
        "parameterTypes": []
      },
      {
        "name": "customId",
        "parameterTypes": []
      },
      {
        "name": "disabled",
        "parameterTypes": []
      },
      {
        "name": "emoji",
        "parameterTypes": []
      },
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableComponentData$Json"
        ]
      },
      {
        "name": "label",
        "parameterTypes": []
      },
      {
        "name": "maxLength",
        "parameterTypes": []
      },
      {
        "name": "maxValues",
        "parameterTypes": []
      },
      {
        "name": "minLength",
        "parameterTypes": []
      },
      {
        "name": "minValues",
        "parameterTypes": []
      },
      {
        "name": "options",
        "parameterTypes": []
      },
      {
        "name": "placeholder",
        "parameterTypes": []
      },
      {
        "name": "required",
        "parameterTypes": []
      },
      {
        "name": "style",
        "parameterTypes": []
      },
      {
        "name": "type",
        "parameterTypes": []
      },
      {
        "name": "url",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      },
      {
        "name": "values",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableComponentData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setComponents",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setCustomId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setDisabled",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setEmoji",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setLabel",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setStyle",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setType",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedAuthorData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableEmbedAuthorData$Json"
        ]
      },
      {
        "name": "iconUrl",
        "parameterTypes": []
      },
      {
        "name": "name",
        "parameterTypes": []
      },
      {
        "name": "proxyIconUrl",
        "parameterTypes": []
      },
      {
        "name": "url",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedAuthorData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setIconUrl",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setName",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setProxyIconUrl",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "author",
        "parameterTypes": []
      },
      {
        "name": "color",
        "parameterTypes": []
      },
      {
        "name": "description",
        "parameterTypes": []
      },
      {
        "name": "fields",
        "parameterTypes": []
      },
      {
        "name": "footer",
        "parameterTypes": []
      },
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableEmbedData$Json"
        ]
      },
      {
        "name": "image",
        "parameterTypes": []
      },
      {
        "name": "provider",
        "parameterTypes": []
      },
      {
        "name": "thumbnail",
        "parameterTypes": []
      },
      {
        "name": "timestamp",
        "parameterTypes": []
      },
      {
        "name": "title",
        "parameterTypes": []
      },
      {
        "name": "type",
        "parameterTypes": []
      },
      {
        "name": "url",
        "parameterTypes": []
      },
      {
        "name": "video",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setAuthor",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setColor",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setDescription",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setFields",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setFooter",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setImage",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setTitle",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setType",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedFieldData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableEmbedFieldData$Json"
        ]
      },
      {
        "name": "inline",
        "parameterTypes": []
      },
      {
        "name": "name",
        "parameterTypes": []
      },
      {
        "name": "value",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedFieldData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setInline",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setValue",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedFooterData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableEmbedFooterData$Json"
        ]
      },
      {
        "name": "iconUrl",
        "parameterTypes": []
      },
      {
        "name": "proxyIconUrl",
        "parameterTypes": []
      },
      {
        "name": "text",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedFooterData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setText",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedImageData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableEmbedImageData$Json"
        ]
      },
      {
        "name": "height",
        "parameterTypes": []
      },
      {
        "name": "proxyUrl",
        "parameterTypes": []
      },
      {
        "name": "url",
        "parameterTypes": []
      },
      {
        "name": "width",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedImageData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setHeight",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setProxyUrl",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setUrl",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setWidth",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedProviderData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedProviderData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedThumbnailData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedThumbnailData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedVideoData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmbedVideoData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmojiData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "animated",
        "parameterTypes": []
      },
      {
        "name": "available",
        "parameterTypes": []
      },
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableEmojiData$Json"
        ]
      },
      {
        "name": "id",
        "parameterTypes": []
      },
      {
        "name": "managed",
        "parameterTypes": []
      },
      {
        "name": "name",
        "parameterTypes": []
      },
      {
        "name": "requireColons",
        "parameterTypes": []
      },
      {
        "name": "roles",
        "parameterTypes": []
      },
      {
        "name": "user",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableEmojiData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setAnimated",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setAvailable",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setManaged",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setName",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setRequireColons",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setRoles",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableGatewayData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableGatewayData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableGatewayData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setSessionStartLimit",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setShards",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setUrl",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableGuildCreateData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableGuildCreateData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableGuildCreateData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setAfkChannelId",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setAfkTimeout",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setApplicationId",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setBanner",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setChannels",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setDefaultMessageNotifications",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setDescription",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setDiscoverySplash",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setEmojis",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setExplicitContentFilter",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setFeatures",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setIcon",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setJoinedAt",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setLarge",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setMaxMembers",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setMaxVideoChannelUsers",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setMemberCount",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setMembers",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setMfaLevel",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setNsfw",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setNsfwLevel",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setOwnerId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setPreferredLocale",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setPremiumSubscriptionCount",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setPremiumTier",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setPresences",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setPublicUpdatesChannelId",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setRegion",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setRoles",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setRulesChannelId",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setSafetyAlertsChannelId",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setSplash",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setStickers",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setSystemChannelFlags",
        "parameterTypes": [
          "java.util.OptionalInt"
        ]
      },
      {
        "name": "setSystemChannelId",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setUnavailable",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setVanityUrlCode",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setVerificationLevel",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setVoiceStates",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableInteractionApplicationCommandCallbackData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "allowedMentions",
        "parameterTypes": []
      },
      {
        "name": "choices",
        "parameterTypes": []
      },
      {
        "name": "components",
        "parameterTypes": []
      },
      {
        "name": "content",
        "parameterTypes": []
      },
      {
        "name": "customId",
        "parameterTypes": []
      },
      {
        "name": "embeds",
        "parameterTypes": []
      },
      {
        "name": "flags",
        "parameterTypes": []
      },
      {
        "name": "title",
        "parameterTypes": []
      },
      {
        "name": "tts",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableInteractionData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableInteractionData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableInteractionData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setAppPermissions",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setApplicationId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setChannel",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setChannelId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setData",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setGuildId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setGuildLocale",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setLocale",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setMember",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setMessage",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setToken",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setType",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setVersion",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableInteractionResponseData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "data",
        "parameterTypes": []
      },
      {
        "name": "type",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMemberData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableMemberData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMemberData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setAvatar",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setCommunicationDisabledUntil",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setDeaf",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setFlags",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setJoinedAt",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setMute",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setNick",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setPending",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setPermissions",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setPremiumSince",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setRoles",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setUser",
        "parameterTypes": [
          "discord4j.discordjson.json.UserData"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMessageActivityData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMessageActivityData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMessageApplicationData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMessageApplicationData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMessageCreateRequest",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "allowedMentions",
        "parameterTypes": []
      },
      {
        "name": "components",
        "parameterTypes": []
      },
      {
        "name": "content",
        "parameterTypes": []
      },
      {
        "name": "embed",
        "parameterTypes": []
      },
      {
        "name": "embeds",
        "parameterTypes": []
      },
      {
        "name": "messageReference",
        "parameterTypes": []
      },
      {
        "name": "nonce",
        "parameterTypes": []
      },
      {
        "name": "tts",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMessageData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableMessageData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMessageData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setApplicationId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setAttachments",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setAuthor",
        "parameterTypes": [
          "discord4j.discordjson.json.UserData"
        ]
      },
      {
        "name": "setChannelId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setComponents",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setContent",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setEditedTimestamp",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setEmbeds",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setFlags",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setGuildId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setInteraction",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setMember",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setMentionEveryone",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setMentionRoles",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setMentions",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setMessageReference",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setNonce",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setPinned",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setTimestamp",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setTts",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setType",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setWebhookId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMessageInteractionData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableMessageInteractionData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMessageInteractionData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setId",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setType",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setUser",
        "parameterTypes": [
          "discord4j.discordjson.json.UserData"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMessageReferenceData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableMessageReferenceData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableMessageReferenceData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setChannelId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setGuildId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setMessageId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableOverwriteData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableOverwriteData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableOverwriteData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setAllow",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setDeny",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setType",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePartialApplicationInfoData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutablePartialApplicationInfoData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePartialApplicationInfoData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setFlags",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePartialMemberData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutablePartialMemberData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePartialMemberData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setAvatar",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setCommunicationDisabledUntil",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setDeaf",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setFlags",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setJoinedAt",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setMute",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setNick",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setPremiumSince",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setRoles",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePartialMessageData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutablePartialMessageData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePartialMessageData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setAttachments",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setAuthor",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setChannelId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setContent",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setEditedTimestamp",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setEmbeds",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setFlags",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setGuildId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setMember",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setMentionEveryone",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setMentionRoles",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setMentions",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setMessageReference",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setPinned",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setTimestamp",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setTts",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setType",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setWebhookId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePartialStickerData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePartialStickerData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePartialUserData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePartialUserData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePresenceData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutablePresenceData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableReactionData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableReactionData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableResolvedChannelData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableResolvedChannelData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableResolvedMemberData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableResolvedMemberData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableRoleData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableRoleData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableRoleData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setColor",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setFlags",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setHoist",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setIcon",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setManaged",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setMentionable",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setPermissions",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "setPosition",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setTags",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setUnicodeEmoji",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableRoleTagsData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableRoleTagsData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableRoleTagsData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setBotId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableSelectOptionData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableSelectOptionData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableSessionStartLimitData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableSessionStartLimitData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableSessionStartLimitData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setMaxConcurrency",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setRemaining",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setResetAfter",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setTotal",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableStickerData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableStickerData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableStickerData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setAsset",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setAvailable",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setDescription",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setFormatType",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "setGuildId",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setName",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setTags",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setType",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableUnavailableGuildData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableUnavailableGuildData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableUnavailableGuildData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setUnavailable",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableUserData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.ImmutableUserData$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableUserData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setAccentColor",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setAvatar",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setBanner",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setBot",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setDiscriminator",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setEmail",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setFlags",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setGlobalName",
        "parameterTypes": [
          "java.util.Optional"
        ]
      },
      {
        "name": "setId",
        "parameterTypes": [
          "discord4j.discordjson.Id"
        ]
      },
      {
        "name": "setMfaEnabled",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setPublicFlags",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setUsername",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setVerified",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.ImmutableUserWithMemberData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableUserWithMemberData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableVoiceStateData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableVoiceStateData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableWelcomeScreenChannelData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableWelcomeScreenChannelData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableWelcomeScreenData",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.ImmutableWelcomeScreenData$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true
  },
  {
    "name": "discord4j.discordjson.json.InteractionApplicationCommandCallbackData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.InteractionData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.InteractionResponseData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.MemberData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.MessageActivityData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.MessageApplicationData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.MessageCreateRequest",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.MessageData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.MessageInteractionData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.MessageReferenceData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.MessageSendRequestBase",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.OverwriteData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.PartialApplicationInfoData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.PartialMemberData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.PartialMessageData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.PartialStickerData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.PartialUserData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.PresenceData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ReactionData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ResolvedChannelData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.ResolvedMemberData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.RoleData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.RoleDataFields",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.RoleTagsData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.SelectOptionData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.SessionStartLimitData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.StickerData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.UnavailableGuildData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.UserData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.UserWithMemberData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.VoiceStateData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.WelcomeScreenChannelData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.WelcomeScreenData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.Dispatch",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.GuildCreate",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.HeartbeatConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.Hello",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.Identify",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.IdentifyProperties",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableGuildCreate",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.gateway.ImmutableGuildCreate$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableGuildCreate$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setGuild",
        "parameterTypes": [
          "discord4j.discordjson.json.GuildCreateData"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableHello",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.gateway.ImmutableHello$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableHello$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setHeartbeatInterval",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableIdentify",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "compress",
        "parameterTypes": []
      },
      {
        "name": "intents",
        "parameterTypes": []
      },
      {
        "name": "largeThreshold",
        "parameterTypes": []
      },
      {
        "name": "presence",
        "parameterTypes": []
      },
      {
        "name": "properties",
        "parameterTypes": []
      },
      {
        "name": "shard",
        "parameterTypes": []
      },
      {
        "name": "token",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableIdentifyProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "browser",
        "parameterTypes": []
      },
      {
        "name": "device",
        "parameterTypes": []
      },
      {
        "name": "os",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableInteractionCreate",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.gateway.ImmutableInteractionCreate$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableInteractionCreate$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setInteraction",
        "parameterTypes": [
          "discord4j.discordjson.json.InteractionData"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableMessageCreate",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.gateway.ImmutableMessageCreate$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableMessageCreate$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setMessage",
        "parameterTypes": [
          "discord4j.discordjson.json.MessageData"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableMessageUpdate",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.gateway.ImmutableMessageUpdate$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableMessageUpdate$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setMessage",
        "parameterTypes": [
          "discord4j.discordjson.json.PartialMessageData"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableReady",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.gateway.ImmutableReady$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableReady$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setApplication",
        "parameterTypes": [
          "discord4j.discordjson.json.PartialApplicationInfoData"
        ]
      },
      {
        "name": "setGuilds",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setPrivateChannels",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setResumeGatewayUrl",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setSessionId",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setShard",
        "parameterTypes": [
          "discord4j.discordjson.possible.Possible"
        ]
      },
      {
        "name": "setTrace",
        "parameterTypes": [
          "java.util.List"
        ]
      },
      {
        "name": "setUser",
        "parameterTypes": [
          "discord4j.discordjson.json.UserData"
        ]
      },
      {
        "name": "setV",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableResume",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "seq",
        "parameterTypes": []
      },
      {
        "name": "sessionId",
        "parameterTypes": []
      },
      {
        "name": "token",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableResumed",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "fromJson",
        "parameterTypes": [
          "discord4j.discordjson.json.gateway.ImmutableResumed$Json"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.ImmutableResumed$Json",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "setTrace",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.InteractionCreate",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.MessageCreate",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.MessageUpdate",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.OpcodeConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.discordjson.json.gateway.PayloadData",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.Ready",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.Resume",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.json.gateway.Resumed",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "discord4j.discordjson.possible.PossibleFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.gateway.json.GatewayPayload",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "getData",
        "parameterTypes": []
      },
      {
        "name": "getOp",
        "parameterTypes": []
      },
      {
        "name": "getSequence",
        "parameterTypes": []
      },
      {
        "name": "getType",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "discord4j.gateway.json.jackson.PayloadDeserializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "freemarker.template.Configuration"
  },
  {
    "name": "groovy.text.TemplateEngine"
  },
  {
    "name": "io.lettuce.core.AbstractRedisAsyncCommands",
    "methods": [
      {
        "name": "aclCat",
        "parameterTypes": []
      },
      {
        "name": "aclCat",
        "parameterTypes": [
          "io.lettuce.core.AclCategory"
        ]
      },
      {
        "name": "aclDeluser",
        "parameterTypes": [
          "java.lang.String[]"
        ]
      },
      {
        "name": "aclDryRun",
        "parameterTypes": [
          "java.lang.String",
          "io.lettuce.core.protocol.RedisCommand"
        ]
      },
      {
        "name": "aclDryRun",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String",
          "java.lang.String[]"
        ]
      },
      {
        "name": "aclGenpass",
        "parameterTypes": []
      },
      {
        "name": "aclGenpass",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "aclGetuser",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "aclList",
        "parameterTypes": []
      },
      {
        "name": "aclLoad",
        "parameterTypes": []
      },
      {
        "name": "aclLog",
        "parameterTypes": []
      },
      {
        "name": "aclLog",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "aclLogReset",
        "parameterTypes": []
      },
      {
        "name": "aclSave",
        "parameterTypes": []
      },
      {
        "name": "aclSetuser",
        "parameterTypes": [
          "java.lang.String",
          "io.lettuce.core.AclSetuserArgs"
        ]
      },
      {
        "name": "aclUsers",
        "parameterTypes": []
      },
      {
        "name": "aclWhoami",
        "parameterTypes": []
      },
      {
        "name": "append",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "asking",
        "parameterTypes": []
      },
      {
        "name": "auth",
        "parameterTypes": [
          "java.lang.CharSequence"
        ]
      },
      {
        "name": "auth",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.CharSequence"
        ]
      },
      {
        "name": "bgrewriteaof",
        "parameterTypes": []
      },
      {
        "name": "bgsave",
        "parameterTypes": []
      },
      {
        "name": "bitcount",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "bitcount",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "bitfield",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.BitFieldArgs"
        ]
      },
      {
        "name": "bitopAnd",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "bitopNot",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "bitopOr",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "bitopXor",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "bitpos",
        "parameterTypes": [
          "java.lang.Object",
          "boolean"
        ]
      },
      {
        "name": "bitpos",
        "parameterTypes": [
          "java.lang.Object",
          "boolean",
          "long"
        ]
      },
      {
        "name": "bitpos",
        "parameterTypes": [
          "java.lang.Object",
          "boolean",
          "long",
          "long"
        ]
      },
      {
        "name": "blmove",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.LMoveArgs",
          "double"
        ]
      },
      {
        "name": "blmove",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.LMoveArgs",
          "long"
        ]
      },
      {
        "name": "blmpop",
        "parameterTypes": [
          "double",
          "io.lettuce.core.LMPopArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "blmpop",
        "parameterTypes": [
          "long",
          "io.lettuce.core.LMPopArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "blpop",
        "parameterTypes": [
          "double",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "blpop",
        "parameterTypes": [
          "long",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "brpop",
        "parameterTypes": [
          "double",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "brpop",
        "parameterTypes": [
          "long",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "brpoplpush",
        "parameterTypes": [
          "double",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "brpoplpush",
        "parameterTypes": [
          "long",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "bzmpop",
        "parameterTypes": [
          "double",
          "int",
          "io.lettuce.core.ZPopArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "bzmpop",
        "parameterTypes": [
          "double",
          "io.lettuce.core.ZPopArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "bzmpop",
        "parameterTypes": [
          "long",
          "long",
          "io.lettuce.core.ZPopArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "bzmpop",
        "parameterTypes": [
          "long",
          "io.lettuce.core.ZPopArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "bzpopmax",
        "parameterTypes": [
          "double",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "bzpopmax",
        "parameterTypes": [
          "long",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "bzpopmin",
        "parameterTypes": [
          "double",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "bzpopmin",
        "parameterTypes": [
          "long",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "clientCaching",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "clientGetname",
        "parameterTypes": []
      },
      {
        "name": "clientGetredir",
        "parameterTypes": []
      },
      {
        "name": "clientId",
        "parameterTypes": []
      },
      {
        "name": "clientInfo",
        "parameterTypes": []
      },
      {
        "name": "clientKill",
        "parameterTypes": [
          "io.lettuce.core.KillArgs"
        ]
      },
      {
        "name": "clientKill",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "clientList",
        "parameterTypes": []
      },
      {
        "name": "clientList",
        "parameterTypes": [
          "io.lettuce.core.ClientListArgs"
        ]
      },
      {
        "name": "clientNoEvict",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "clientPause",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "clientSetinfo",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "clientSetname",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "clientTracking",
        "parameterTypes": [
          "io.lettuce.core.TrackingArgs"
        ]
      },
      {
        "name": "clientUnblock",
        "parameterTypes": [
          "long",
          "io.lettuce.core.UnblockType"
        ]
      },
      {
        "name": "clusterAddSlots",
        "parameterTypes": [
          "int[]"
        ]
      },
      {
        "name": "clusterAddSlotsRange",
        "parameterTypes": [
          "io.lettuce.core.Range[]"
        ]
      },
      {
        "name": "clusterBumpepoch",
        "parameterTypes": []
      },
      {
        "name": "clusterCountFailureReports",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "clusterCountKeysInSlot",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "clusterDelSlots",
        "parameterTypes": [
          "int[]"
        ]
      },
      {
        "name": "clusterDelSlotsRange",
        "parameterTypes": [
          "io.lettuce.core.Range[]"
        ]
      },
      {
        "name": "clusterFailover",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "clusterFailover",
        "parameterTypes": [
          "boolean",
          "boolean"
        ]
      },
      {
        "name": "clusterFlushslots",
        "parameterTypes": []
      },
      {
        "name": "clusterForget",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "clusterGetKeysInSlot",
        "parameterTypes": [
          "int",
          "int"
        ]
      },
      {
        "name": "clusterInfo",
        "parameterTypes": []
      },
      {
        "name": "clusterKeyslot",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "clusterMeet",
        "parameterTypes": [
          "java.lang.String",
          "int"
        ]
      },
      {
        "name": "clusterMyId",
        "parameterTypes": []
      },
      {
        "name": "clusterNodes",
        "parameterTypes": []
      },
      {
        "name": "clusterReplicas",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "clusterReplicate",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "clusterReset",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "clusterSaveconfig",
        "parameterTypes": []
      },
      {
        "name": "clusterSetConfigEpoch",
        "parameterTypes": [
          "long"
        ]
      },
      {
        "name": "clusterSetSlotImporting",
        "parameterTypes": [
          "int",
          "java.lang.String"
        ]
      },
      {
        "name": "clusterSetSlotMigrating",
        "parameterTypes": [
          "int",
          "java.lang.String"
        ]
      },
      {
        "name": "clusterSetSlotNode",
        "parameterTypes": [
          "int",
          "java.lang.String"
        ]
      },
      {
        "name": "clusterSetSlotStable",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "clusterShards",
        "parameterTypes": []
      },
      {
        "name": "clusterSlaves",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "clusterSlots",
        "parameterTypes": []
      },
      {
        "name": "command",
        "parameterTypes": []
      },
      {
        "name": "commandCount",
        "parameterTypes": []
      },
      {
        "name": "commandInfo",
        "parameterTypes": [
          "io.lettuce.core.protocol.CommandType[]"
        ]
      },
      {
        "name": "commandInfo",
        "parameterTypes": [
          "java.lang.String[]"
        ]
      },
      {
        "name": "configGet",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "configGet",
        "parameterTypes": [
          "java.lang.String[]"
        ]
      },
      {
        "name": "configResetstat",
        "parameterTypes": []
      },
      {
        "name": "configRewrite",
        "parameterTypes": []
      },
      {
        "name": "configSet",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "configSet",
        "parameterTypes": [
          "java.util.Map"
        ]
      },
      {
        "name": "copy",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "copy",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.CopyArgs"
        ]
      },
      {
        "name": "dbsize",
        "parameterTypes": []
      },
      {
        "name": "debugCrashAndRecover",
        "parameterTypes": [
          "java.lang.Long"
        ]
      },
      {
        "name": "debugHtstats",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "debugObject",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "debugOom",
        "parameterTypes": []
      },
      {
        "name": "debugReload",
        "parameterTypes": []
      },
      {
        "name": "debugRestart",
        "parameterTypes": [
          "java.lang.Long"
        ]
      },
      {
        "name": "debugSdslen",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "debugSegfault",
        "parameterTypes": []
      },
      {
        "name": "decr",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "decrby",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "del",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "digest",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "digest",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "discard",
        "parameterTypes": []
      },
      {
        "name": "dispatch",
        "parameterTypes": [
          "io.lettuce.core.protocol.ProtocolKeyword",
          "io.lettuce.core.output.CommandOutput"
        ]
      },
      {
        "name": "dispatch",
        "parameterTypes": [
          "io.lettuce.core.protocol.ProtocolKeyword",
          "io.lettuce.core.output.CommandOutput",
          "io.lettuce.core.protocol.CommandArgs"
        ]
      },
      {
        "name": "dump",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "echo",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "eval",
        "parameterTypes": [
          "java.lang.String",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "eval",
        "parameterTypes": [
          "java.lang.String",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "eval",
        "parameterTypes": [
          "byte[]",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "eval",
        "parameterTypes": [
          "byte[]",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "evalReadOnly",
        "parameterTypes": [
          "byte[]",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "evalsha",
        "parameterTypes": [
          "java.lang.String",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "evalsha",
        "parameterTypes": [
          "java.lang.String",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "evalshaReadOnly",
        "parameterTypes": [
          "java.lang.String",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "exec",
        "parameterTypes": []
      },
      {
        "name": "exists",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "expire",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "expire",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "io.lettuce.core.ExpireArgs"
        ]
      },
      {
        "name": "expire",
        "parameterTypes": [
          "java.lang.Object",
          "java.time.Duration"
        ]
      },
      {
        "name": "expire",
        "parameterTypes": [
          "java.lang.Object",
          "java.time.Duration",
          "io.lettuce.core.ExpireArgs"
        ]
      },
      {
        "name": "expireat",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "expireat",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "io.lettuce.core.ExpireArgs"
        ]
      },
      {
        "name": "expireat",
        "parameterTypes": [
          "java.lang.Object",
          "java.time.Instant"
        ]
      },
      {
        "name": "expireat",
        "parameterTypes": [
          "java.lang.Object",
          "java.time.Instant",
          "io.lettuce.core.ExpireArgs"
        ]
      },
      {
        "name": "expireat",
        "parameterTypes": [
          "java.lang.Object",
          "java.util.Date"
        ]
      },
      {
        "name": "expireat",
        "parameterTypes": [
          "java.lang.Object",
          "java.util.Date",
          "io.lettuce.core.ExpireArgs"
        ]
      },
      {
        "name": "expiretime",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "fcall",
        "parameterTypes": [
          "java.lang.String",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "fcall",
        "parameterTypes": [
          "java.lang.String",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "fcallReadOnly",
        "parameterTypes": [
          "java.lang.String",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "fcallReadOnly",
        "parameterTypes": [
          "java.lang.String",
          "io.lettuce.core.ScriptOutputType",
          "java.lang.Object[]",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "flushall",
        "parameterTypes": []
      },
      {
        "name": "flushall",
        "parameterTypes": [
          "io.lettuce.core.FlushMode"
        ]
      },
      {
        "name": "flushallAsync",
        "parameterTypes": []
      },
      {
        "name": "flushdb",
        "parameterTypes": []
      },
      {
        "name": "flushdb",
        "parameterTypes": [
          "io.lettuce.core.FlushMode"
        ]
      },
      {
        "name": "flushdbAsync",
        "parameterTypes": []
      },
      {
        "name": "functionDump",
        "parameterTypes": []
      },
      {
        "name": "functionFlush",
        "parameterTypes": [
          "io.lettuce.core.FlushMode"
        ]
      },
      {
        "name": "functionKill",
        "parameterTypes": []
      },
      {
        "name": "functionList",
        "parameterTypes": []
      },
      {
        "name": "functionList",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "functionLoad",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "functionLoad",
        "parameterTypes": [
          "java.lang.String",
          "boolean"
        ]
      },
      {
        "name": "functionRestore",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "functionRestore",
        "parameterTypes": [
          "byte[]",
          "io.lettuce.core.FunctionRestoreMode"
        ]
      },
      {
        "name": "geoadd",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double",
          "java.lang.Object"
        ]
      },
      {
        "name": "geoadd",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double",
          "java.lang.Object",
          "io.lettuce.core.GeoAddArgs"
        ]
      },
      {
        "name": "geoadd",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.GeoAddArgs",
          "io.lettuce.core.GeoValue[]"
        ]
      },
      {
        "name": "geoadd",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.GeoAddArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "geoadd",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.GeoValue[]"
        ]
      },
      {
        "name": "geoadd",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "geodist",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.GeoArgs$Unit"
        ]
      },
      {
        "name": "geohash",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "geopos",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "georadius",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double",
          "double",
          "io.lettuce.core.GeoArgs$Unit"
        ]
      },
      {
        "name": "georadius",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double",
          "double",
          "io.lettuce.core.GeoArgs$Unit",
          "io.lettuce.core.GeoArgs"
        ]
      },
      {
        "name": "georadius",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double",
          "double",
          "io.lettuce.core.GeoArgs$Unit",
          "io.lettuce.core.GeoRadiusStoreArgs"
        ]
      },
      {
        "name": "georadiusbymember",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "double",
          "io.lettuce.core.GeoArgs$Unit"
        ]
      },
      {
        "name": "georadiusbymember",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "double",
          "io.lettuce.core.GeoArgs$Unit",
          "io.lettuce.core.GeoArgs"
        ]
      },
      {
        "name": "georadiusbymember",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "double",
          "io.lettuce.core.GeoArgs$Unit",
          "io.lettuce.core.GeoRadiusStoreArgs"
        ]
      },
      {
        "name": "geosearch",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.GeoSearch$GeoRef",
          "io.lettuce.core.GeoSearch$GeoPredicate"
        ]
      },
      {
        "name": "geosearch",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.GeoSearch$GeoRef",
          "io.lettuce.core.GeoSearch$GeoPredicate",
          "io.lettuce.core.GeoArgs"
        ]
      },
      {
        "name": "geosearchstore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.GeoSearch$GeoRef",
          "io.lettuce.core.GeoSearch$GeoPredicate",
          "io.lettuce.core.GeoArgs",
          "boolean"
        ]
      },
      {
        "name": "get",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "getbit",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "getdel",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "getex",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.GetExArgs"
        ]
      },
      {
        "name": "getrange",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "getset",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "hdel",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "hexists",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "hget",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "hgetall",
        "parameterTypes": [
          "io.lettuce.core.output.KeyValueStreamingChannel",
          "java.lang.Object"
        ]
      },
      {
        "name": "hgetall",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "hincrby",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "hincrbyfloat",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "double"
        ]
      },
      {
        "name": "hkeys",
        "parameterTypes": [
          "io.lettuce.core.output.KeyStreamingChannel",
          "java.lang.Object"
        ]
      },
      {
        "name": "hkeys",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "hlen",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "hmget",
        "parameterTypes": [
          "io.lettuce.core.output.KeyValueStreamingChannel",
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "hmget",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "hmset",
        "parameterTypes": [
          "java.lang.Object",
          "java.util.Map"
        ]
      },
      {
        "name": "hrandfield",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "hrandfield",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "hrandfieldWithvalues",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "hrandfieldWithvalues",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "hscan",
        "parameterTypes": [
          "io.lettuce.core.output.KeyValueStreamingChannel",
          "java.lang.Object"
        ]
      },
      {
        "name": "hscan",
        "parameterTypes": [
          "io.lettuce.core.output.KeyValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "hscan",
        "parameterTypes": [
          "io.lettuce.core.output.KeyValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.ScanCursor"
        ]
      },
      {
        "name": "hscan",
        "parameterTypes": [
          "io.lettuce.core.output.KeyValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.ScanCursor",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "hscan",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "hscan",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "hscan",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ScanCursor"
        ]
      },
      {
        "name": "hscan",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ScanCursor",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "hset",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "hset",
        "parameterTypes": [
          "java.lang.Object",
          "java.util.Map"
        ]
      },
      {
        "name": "hsetnx",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "hstrlen",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "hvals",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object"
        ]
      },
      {
        "name": "hvals",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "incr",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "incrby",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "incrbyfloat",
        "parameterTypes": [
          "java.lang.Object",
          "double"
        ]
      },
      {
        "name": "info",
        "parameterTypes": []
      },
      {
        "name": "info",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "isOpen",
        "parameterTypes": []
      },
      {
        "name": "keys",
        "parameterTypes": [
          "io.lettuce.core.output.KeyStreamingChannel",
          "java.lang.Object"
        ]
      },
      {
        "name": "keys",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "lastsave",
        "parameterTypes": []
      },
      {
        "name": "lindex",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "linsert",
        "parameterTypes": [
          "java.lang.Object",
          "boolean",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "llen",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "lmove",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.LMoveArgs"
        ]
      },
      {
        "name": "lmpop",
        "parameterTypes": [
          "io.lettuce.core.LMPopArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "lpop",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "lpop",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "lpos",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "lpos",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "int"
        ]
      },
      {
        "name": "lpos",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "int",
          "io.lettuce.core.LPosArgs"
        ]
      },
      {
        "name": "lpos",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.LPosArgs"
        ]
      },
      {
        "name": "lpush",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "lpushx",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "lrange",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "lrange",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "lrem",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object"
        ]
      },
      {
        "name": "lset",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object"
        ]
      },
      {
        "name": "ltrim",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "memoryUsage",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "mget",
        "parameterTypes": [
          "io.lettuce.core.output.KeyValueStreamingChannel",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "mget",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "migrate",
        "parameterTypes": [
          "java.lang.String",
          "int",
          "int",
          "long",
          "io.lettuce.core.MigrateArgs"
        ]
      },
      {
        "name": "migrate",
        "parameterTypes": [
          "java.lang.String",
          "int",
          "java.lang.Object",
          "int",
          "long"
        ]
      },
      {
        "name": "move",
        "parameterTypes": [
          "java.lang.Object",
          "int"
        ]
      },
      {
        "name": "mset",
        "parameterTypes": [
          "java.util.Map"
        ]
      },
      {
        "name": "msetnx",
        "parameterTypes": [
          "java.util.Map"
        ]
      },
      {
        "name": "multi",
        "parameterTypes": []
      },
      {
        "name": "objectEncoding",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "objectFreq",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "objectIdletime",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "objectRefcount",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "persist",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "pexpire",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "pexpire",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "io.lettuce.core.ExpireArgs"
        ]
      },
      {
        "name": "pexpire",
        "parameterTypes": [
          "java.lang.Object",
          "java.time.Duration"
        ]
      },
      {
        "name": "pexpire",
        "parameterTypes": [
          "java.lang.Object",
          "java.time.Duration",
          "io.lettuce.core.ExpireArgs"
        ]
      },
      {
        "name": "pexpireat",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "pexpireat",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "io.lettuce.core.ExpireArgs"
        ]
      },
      {
        "name": "pexpireat",
        "parameterTypes": [
          "java.lang.Object",
          "java.time.Instant"
        ]
      },
      {
        "name": "pexpireat",
        "parameterTypes": [
          "java.lang.Object",
          "java.time.Instant",
          "io.lettuce.core.ExpireArgs"
        ]
      },
      {
        "name": "pexpireat",
        "parameterTypes": [
          "java.lang.Object",
          "java.util.Date"
        ]
      },
      {
        "name": "pexpireat",
        "parameterTypes": [
          "java.lang.Object",
          "java.util.Date",
          "io.lettuce.core.ExpireArgs"
        ]
      },
      {
        "name": "pexpiretime",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "pfadd",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "pfcount",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "pfmerge",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "ping",
        "parameterTypes": []
      },
      {
        "name": "psetex",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object"
        ]
      },
      {
        "name": "pttl",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "publish",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "pubsubChannels",
        "parameterTypes": []
      },
      {
        "name": "pubsubChannels",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "pubsubNumpat",
        "parameterTypes": []
      },
      {
        "name": "pubsubNumsub",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "quit",
        "parameterTypes": []
      },
      {
        "name": "randomkey",
        "parameterTypes": []
      },
      {
        "name": "readOnly",
        "parameterTypes": []
      },
      {
        "name": "readWrite",
        "parameterTypes": []
      },
      {
        "name": "rename",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "renamenx",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "replicaof",
        "parameterTypes": [
          "java.lang.String",
          "int"
        ]
      },
      {
        "name": "replicaofNoOne",
        "parameterTypes": []
      },
      {
        "name": "reset",
        "parameterTypes": []
      },
      {
        "name": "restore",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "byte[]"
        ]
      },
      {
        "name": "restore",
        "parameterTypes": [
          "java.lang.Object",
          "byte[]",
          "io.lettuce.core.RestoreArgs"
        ]
      },
      {
        "name": "role",
        "parameterTypes": []
      },
      {
        "name": "rpop",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "rpop",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "rpoplpush",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "rpush",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "rpushx",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "sadd",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "save",
        "parameterTypes": []
      },
      {
        "name": "scan",
        "parameterTypes": []
      },
      {
        "name": "scan",
        "parameterTypes": [
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "scan",
        "parameterTypes": [
          "io.lettuce.core.ScanCursor"
        ]
      },
      {
        "name": "scan",
        "parameterTypes": [
          "io.lettuce.core.ScanCursor",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "scan",
        "parameterTypes": [
          "io.lettuce.core.output.KeyStreamingChannel"
        ]
      },
      {
        "name": "scan",
        "parameterTypes": [
          "io.lettuce.core.output.KeyStreamingChannel",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "scan",
        "parameterTypes": [
          "io.lettuce.core.output.KeyStreamingChannel",
          "io.lettuce.core.ScanCursor"
        ]
      },
      {
        "name": "scan",
        "parameterTypes": [
          "io.lettuce.core.output.KeyStreamingChannel",
          "io.lettuce.core.ScanCursor",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "scard",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "scriptExists",
        "parameterTypes": [
          "java.lang.String[]"
        ]
      },
      {
        "name": "scriptFlush",
        "parameterTypes": []
      },
      {
        "name": "scriptFlush",
        "parameterTypes": [
          "io.lettuce.core.FlushMode"
        ]
      },
      {
        "name": "scriptKill",
        "parameterTypes": []
      },
      {
        "name": "scriptLoad",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "scriptLoad",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "sdiff",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "sdiff",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "sdiffstore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "select",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "set",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "set",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.SetArgs"
        ]
      },
      {
        "name": "setGet",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "setGet",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.SetArgs"
        ]
      },
      {
        "name": "setTimeout",
        "parameterTypes": [
          "java.time.Duration"
        ]
      },
      {
        "name": "setbit",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "int"
        ]
      },
      {
        "name": "setex",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object"
        ]
      },
      {
        "name": "setnx",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "setrange",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object"
        ]
      },
      {
        "name": "shutdown",
        "parameterTypes": [
          "io.lettuce.core.ShutdownArgs"
        ]
      },
      {
        "name": "shutdown",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "sinter",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "sinter",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "sintercard",
        "parameterTypes": [
          "long",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "sintercard",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "sinterstore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "sismember",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "slaveof",
        "parameterTypes": [
          "java.lang.String",
          "int"
        ]
      },
      {
        "name": "slaveofNoOne",
        "parameterTypes": []
      },
      {
        "name": "slowlogGet",
        "parameterTypes": []
      },
      {
        "name": "slowlogGet",
        "parameterTypes": [
          "int"
        ]
      },
      {
        "name": "slowlogLen",
        "parameterTypes": []
      },
      {
        "name": "slowlogReset",
        "parameterTypes": []
      },
      {
        "name": "smembers",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object"
        ]
      },
      {
        "name": "smembers",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "smismember",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "smove",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "sort",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object"
        ]
      },
      {
        "name": "sort",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.SortArgs"
        ]
      },
      {
        "name": "sort",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "sort",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.SortArgs"
        ]
      },
      {
        "name": "sortReadOnly",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object"
        ]
      },
      {
        "name": "sortReadOnly",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.SortArgs"
        ]
      },
      {
        "name": "sortReadOnly",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "sortReadOnly",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.SortArgs"
        ]
      },
      {
        "name": "sortStore",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.SortArgs",
          "java.lang.Object"
        ]
      },
      {
        "name": "spop",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "spop",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "srandmember",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "srandmember",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "srandmember",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "srem",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "sscan",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object"
        ]
      },
      {
        "name": "sscan",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "sscan",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.ScanCursor"
        ]
      },
      {
        "name": "sscan",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.ScanCursor",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "sscan",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "sscan",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "sscan",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ScanCursor"
        ]
      },
      {
        "name": "sscan",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ScanCursor",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "stralgoLcs",
        "parameterTypes": [
          "io.lettuce.core.StrAlgoArgs"
        ]
      },
      {
        "name": "strlen",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "sunion",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "sunion",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "sunionstore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "swapdb",
        "parameterTypes": [
          "int",
          "int"
        ]
      },
      {
        "name": "time",
        "parameterTypes": []
      },
      {
        "name": "touch",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "ttl",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "type",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "unlink",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "unwatch",
        "parameterTypes": []
      },
      {
        "name": "waitForReplication",
        "parameterTypes": [
          "int",
          "long"
        ]
      },
      {
        "name": "watch",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "xack",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "java.lang.String[]"
        ]
      },
      {
        "name": "xadd",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.XAddArgs",
          "java.util.Map"
        ]
      },
      {
        "name": "xadd",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.XAddArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "xadd",
        "parameterTypes": [
          "java.lang.Object",
          "java.util.Map"
        ]
      },
      {
        "name": "xadd",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "xautoclaim",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.XAutoClaimArgs"
        ]
      },
      {
        "name": "xclaim",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Consumer",
          "long",
          "java.lang.String[]"
        ]
      },
      {
        "name": "xclaim",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Consumer",
          "io.lettuce.core.XClaimArgs",
          "java.lang.String[]"
        ]
      },
      {
        "name": "xdel",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String[]"
        ]
      },
      {
        "name": "xgroupCreate",
        "parameterTypes": [
          "io.lettuce.core.XReadArgs$StreamOffset",
          "java.lang.Object"
        ]
      },
      {
        "name": "xgroupCreate",
        "parameterTypes": [
          "io.lettuce.core.XReadArgs$StreamOffset",
          "java.lang.Object",
          "io.lettuce.core.XGroupCreateArgs"
        ]
      },
      {
        "name": "xgroupCreateconsumer",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Consumer"
        ]
      },
      {
        "name": "xgroupDelconsumer",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Consumer"
        ]
      },
      {
        "name": "xgroupDestroy",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "xgroupSetid",
        "parameterTypes": [
          "io.lettuce.core.XReadArgs$StreamOffset",
          "java.lang.Object"
        ]
      },
      {
        "name": "xinfoConsumers",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "xinfoGroups",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "xinfoStream",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "xlen",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "xpending",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Consumer",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "xpending",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.XPendingArgs"
        ]
      },
      {
        "name": "xpending",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "xpending",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "xrange",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "xrange",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "xread",
        "parameterTypes": [
          "io.lettuce.core.XReadArgs",
          "io.lettuce.core.XReadArgs$StreamOffset[]"
        ]
      },
      {
        "name": "xread",
        "parameterTypes": [
          "io.lettuce.core.XReadArgs$StreamOffset[]"
        ]
      },
      {
        "name": "xreadgroup",
        "parameterTypes": [
          "io.lettuce.core.Consumer",
          "io.lettuce.core.XReadArgs",
          "io.lettuce.core.XReadArgs$StreamOffset[]"
        ]
      },
      {
        "name": "xreadgroup",
        "parameterTypes": [
          "io.lettuce.core.Consumer",
          "io.lettuce.core.XReadArgs$StreamOffset[]"
        ]
      },
      {
        "name": "xrevrange",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "xrevrange",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "xtrim",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "xtrim",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.XTrimArgs"
        ]
      },
      {
        "name": "xtrim",
        "parameterTypes": [
          "java.lang.Object",
          "boolean",
          "long"
        ]
      },
      {
        "name": "zadd",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "java.lang.Object"
        ]
      },
      {
        "name": "zadd",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ZAddArgs",
          "double",
          "java.lang.Object"
        ]
      },
      {
        "name": "zadd",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ZAddArgs",
          "io.lettuce.core.ScoredValue[]"
        ]
      },
      {
        "name": "zadd",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ZAddArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zadd",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ScoredValue[]"
        ]
      },
      {
        "name": "zadd",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zaddincr",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "java.lang.Object"
        ]
      },
      {
        "name": "zaddincr",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ZAddArgs",
          "double",
          "java.lang.Object"
        ]
      },
      {
        "name": "zcard",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "zcount",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double"
        ]
      },
      {
        "name": "zcount",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zcount",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zdiff",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zdiffWithScores",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zdiffstore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zincrby",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "java.lang.Object"
        ]
      },
      {
        "name": "zinter",
        "parameterTypes": [
          "io.lettuce.core.ZAggregateArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zinter",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zinterWithScores",
        "parameterTypes": [
          "io.lettuce.core.ZAggregateArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zinterWithScores",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zintercard",
        "parameterTypes": [
          "long",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zintercard",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zinterstore",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ZStoreArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zinterstore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zlexcount",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zlexcount",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zmpop",
        "parameterTypes": [
          "int",
          "io.lettuce.core.ZPopArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zmpop",
        "parameterTypes": [
          "io.lettuce.core.ZPopArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zmscore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zpopmax",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "zpopmax",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "zpopmin",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "zpopmin",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "zrandmember",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "zrandmember",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "zrandmemberWithScores",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "zrandmemberWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "long"
        ]
      },
      {
        "name": "zrange",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "zrange",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangeWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangeWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangebylex",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrangebylex",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrangebylex",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zrangebylex",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "double",
          "double"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "double",
          "double",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "double",
          "double"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "double",
          "double",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String",
          "long",
          "long"
        ]
      },
      {
        "name": "zrangestore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrangestorebylex",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrangestorebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrank",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "zrankWithScore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "zrem",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zremrangebylex",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zremrangebylex",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zremrangebyrank",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "zremrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double"
        ]
      },
      {
        "name": "zremrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zremrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zrevrange",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrange",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrangeWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrangeWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrangebylex",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrevrangebylex",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "double",
          "double"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "double",
          "double",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "io.lettuce.core.output.ValueStreamingChannel",
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zrevrangebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "double",
          "double"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "double",
          "double",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "double",
          "double",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String"
        ]
      },
      {
        "name": "zrevrangebyscoreWithScores",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.String",
          "java.lang.String",
          "long",
          "long"
        ]
      },
      {
        "name": "zrevrangestore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.Range"
        ]
      },
      {
        "name": "zrevrangestorebylex",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrevrangestorebyscore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object",
          "io.lettuce.core.Range",
          "io.lettuce.core.Limit"
        ]
      },
      {
        "name": "zrevrank",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "zrevrankWithScore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "zscan",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object"
        ]
      },
      {
        "name": "zscan",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "zscan",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.ScanCursor"
        ]
      },
      {
        "name": "zscan",
        "parameterTypes": [
          "io.lettuce.core.output.ScoredValueStreamingChannel",
          "java.lang.Object",
          "io.lettuce.core.ScanCursor",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "zscan",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "zscan",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "zscan",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ScanCursor"
        ]
      },
      {
        "name": "zscan",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ScanCursor",
          "io.lettuce.core.ScanArgs"
        ]
      },
      {
        "name": "zscore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object"
        ]
      },
      {
        "name": "zunion",
        "parameterTypes": [
          "io.lettuce.core.ZAggregateArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zunion",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zunionWithScores",
        "parameterTypes": [
          "io.lettuce.core.ZAggregateArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zunionWithScores",
        "parameterTypes": [
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zunionstore",
        "parameterTypes": [
          "java.lang.Object",
          "io.lettuce.core.ZStoreArgs",
          "java.lang.Object[]"
        ]
      },
      {
        "name": "zunionstore",
        "parameterTypes": [
          "java.lang.Object",
          "java.lang.Object[]"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.ChannelGroupListener",
    "methods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.ConnectionBuilder$PlainChannelInitializer",
    "methods": [
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.ConnectionEventTrigger",
    "methods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.RedisAsyncCommandsImpl",
    "methods": [
      {
        "name": "getStatefulConnection",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.lettuce.core.RedisChannelHandler",
    "fields": [
      {
        "name": "closed"
      }
    ]
  },
  {
    "name": "io.lettuce.core.api.sync.BaseRedisCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisAclCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisFunctionCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisGeoCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisHLLCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisHashCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisKeyCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisListCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisScriptingCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisServerCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisSetCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisSortedSetCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisStreamCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisStringCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.api.sync.RedisTransactionalCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.cluster.api.sync.RedisClusterCommands",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.lettuce.core.event.connection.JfrConnectEvent",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "io.lettuce.core.event.connection.ConnectEvent"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.event.connection.JfrConnectedEvent",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "io.lettuce.core.event.connection.ConnectionEventSupport"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.event.connection.JfrConnectionActivatedEvent",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "io.lettuce.core.event.connection.ConnectionEventSupport"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.event.connection.JfrConnectionCreatedEvent",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "io.lettuce.core.event.connection.ConnectionCreatedEvent"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.event.connection.JfrConnectionDeactivatedEvent",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "io.lettuce.core.event.connection.ConnectionEventSupport"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.event.connection.JfrDisconnectedEvent",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "io.lettuce.core.event.connection.ConnectionEventSupport"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.event.connection.JfrReconnectAttemptEvent",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "io.lettuce.core.event.connection.ReconnectAttemptEvent"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.event.connection.JfrReconnectFailedEvent",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "io.lettuce.core.event.connection.ReconnectFailedEvent"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.metrics.DefaultCommandLatencyCollector",
    "fields": [
      {
        "name": "pauseDetectorWrapper"
      }
    ]
  },
  {
    "name": "io.lettuce.core.protocol.AsyncCommand",
    "fields": [
      {
        "name": "count"
      }
    ]
  },
  {
    "name": "io.lettuce.core.protocol.CommandEncoder"
  },
  {
    "name": "io.lettuce.core.protocol.CommandHandler",
    "methods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.protocol.CommandWrapper",
    "fields": [
      {
        "name": "onComplete"
      }
    ]
  },
  {
    "name": "io.lettuce.core.protocol.ConnectionWatchdog",
    "methods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.protocol.DefaultEndpoint",
    "fields": [
      {
        "name": "queueSize"
      },
      {
        "name": "status"
      }
    ]
  },
  {
    "name": "io.lettuce.core.protocol.RedisHandshakeHandler",
    "methods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.lettuce.core.protocol.SharedLock",
    "fields": [
      {
        "name": "writers"
      }
    ]
  },
  {
    "name": "io.lettuce.core.resource.ClientResources",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "shutdown",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.lettuce.core.resource.DefaultClientResources",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "addressResolverGroup",
        "parameterTypes": []
      },
      {
        "name": "commandLatencyPublisherOptions",
        "parameterTypes": []
      },
      {
        "name": "commandLatencyRecorder",
        "parameterTypes": []
      },
      {
        "name": "computationThreadPoolSize",
        "parameterTypes": []
      },
      {
        "name": "dnsResolver",
        "parameterTypes": []
      },
      {
        "name": "eventBus",
        "parameterTypes": []
      },
      {
        "name": "eventExecutorGroup",
        "parameterTypes": []
      },
      {
        "name": "eventLoopGroupProvider",
        "parameterTypes": []
      },
      {
        "name": "ioThreadPoolSize",
        "parameterTypes": []
      },
      {
        "name": "mutate",
        "parameterTypes": []
      },
      {
        "name": "nettyCustomizer",
        "parameterTypes": []
      },
      {
        "name": "reconnectDelay",
        "parameterTypes": []
      },
      {
        "name": "shutdown",
        "parameterTypes": []
      },
      {
        "name": "shutdown",
        "parameterTypes": [
          "long",
          "long",
          "java.util.concurrent.TimeUnit"
        ]
      },
      {
        "name": "socketAddressResolver",
        "parameterTypes": []
      },
      {
        "name": "timer",
        "parameterTypes": []
      },
      {
        "name": "tracing",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.micrometer.context.ContextRegistry"
  },
  {
    "name": "io.micrometer.tracing.Tracer"
  },
  {
    "name": "io.netty.buffer.AbstractByteBufAllocator",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.netty.buffer.AbstractReferenceCountedByteBuf",
    "fields": [
      {
        "name": "refCnt"
      }
    ]
  },
  {
    "name": "io.netty.buffer.ByteBuf"
  },
  {
    "name": "io.netty.channel.AbstractChannelHandlerContext",
    "fields": [
      {
        "name": "handlerState"
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelDuplexHandler",
    "methods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "read",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelHandlerAdapter",
    "methods": [
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelInboundHandlerAdapter",
    "methods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelInitializer",
    "methods": [
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelOutboundBuffer",
    "fields": [
      {
        "name": "totalPendingSize"
      },
      {
        "name": "unwritable"
      }
    ]
  },
  {
    "name": "io.netty.channel.ChannelOutboundHandlerAdapter",
    "methods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "read",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.CombinedChannelDuplexHandler",
    "methods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "read",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultChannelConfig",
    "fields": [
      {
        "name": "autoRead"
      },
      {
        "name": "writeBufferWaterMark"
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultChannelPipeline",
    "fields": [
      {
        "name": "estimatorHandle"
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultChannelPipeline$HeadContext",
    "methods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "read",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultChannelPipeline$TailContext",
    "methods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRegistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelUnregistered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.channel.DefaultFileRegion"
  },
  {
    "name": "io.netty.channel.embedded.EmbeddedChannel$2"
  },
  {
    "name": "io.netty.channel.epoll.Epoll"
  },
  {
    "name": "io.netty.channel.epoll.NativeDatagramPacketArray$NativeDatagramPacket"
  },
  {
    "name": "io.netty.channel.kqueue.KQueue"
  },
  {
    "name": "io.netty.channel.socket.nio.NioDatagramChannel",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.netty.channel.socket.nio.NioSocketChannel",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.netty.channel.unix.PeerCredentials"
  },
  {
    "name": "io.netty.handler.codec.ByteToMessageDecoder",
    "methods": [
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.MessageAggregator",
    "methods": [
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.MessageToByteEncoder",
    "methods": [
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.MessageToMessageDecoder",
    "methods": [
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.MessageToMessageEncoder",
    "methods": [
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.compression.JdkZlibDecoder"
  },
  {
    "name": "io.netty.handler.codec.dns.DatagramDnsQueryEncoder"
  },
  {
    "name": "io.netty.handler.codec.http.HttpClientCodec"
  },
  {
    "name": "io.netty.handler.codec.http.HttpContentDecoder",
    "methods": [
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.http.HttpContentDecompressor"
  },
  {
    "name": "io.netty.handler.codec.http.HttpObjectAggregator"
  },
  {
    "name": "io.netty.handler.codec.http.websocketx.WebSocket13FrameDecoder"
  },
  {
    "name": "io.netty.handler.codec.http.websocketx.WebSocket13FrameEncoder"
  },
  {
    "name": "io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker",
    "fields": [
      {
        "name": "forceCloseInit"
      }
    ]
  },
  {
    "name": "io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator"
  },
  {
    "name": "io.netty.handler.ssl.SslHandler",
    "methods": [
      {
        "name": "bind",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "close",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "connect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.net.SocketAddress",
          "java.net.SocketAddress",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "deregister",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "disconnect",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "io.netty.channel.ChannelPromise"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "flush",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "read",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "write",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object",
          "io.netty.channel.ChannelPromise"
        ]
      }
    ]
  },
  {
    "name": "io.netty.incubator.channel.uring.IOUring"
  },
  {
    "name": "io.netty.internal.tcnative.SSLContext"
  },
  {
    "name": "io.netty.resolver.dns.Cache$Entries",
    "fields": [
      {
        "name": "expirationFuture"
      }
    ]
  },
  {
    "name": "io.netty.resolver.dns.DnsAddressResolverGroup"
  },
  {
    "name": "io.netty.resolver.dns.DnsNameResolver$2"
  },
  {
    "name": "io.netty.resolver.dns.DnsNameResolver$3"
  },
  {
    "name": "io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler",
    "methods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "io.netty.util.AbstractReferenceCounted",
    "fields": [
      {
        "name": "refCnt"
      }
    ]
  },
  {
    "name": "io.netty.util.DefaultAttributeMap",
    "fields": [
      {
        "name": "attributes"
      }
    ]
  },
  {
    "name": "io.netty.util.DefaultAttributeMap$DefaultAttribute",
    "fields": [
      {
        "name": "attributeMap"
      }
    ]
  },
  {
    "name": "io.netty.util.HashedWheelTimer",
    "fields": [
      {
        "name": "workerState"
      }
    ]
  },
  {
    "name": "io.netty.util.HashedWheelTimer$HashedWheelTimeout",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "io.netty.util.Recycler$DefaultHandle",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "io.netty.util.ReferenceCountUtil",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "io.netty.util.ResourceLeakDetector$DefaultResourceLeak",
    "fields": [
      {
        "name": "droppedRecords"
      },
      {
        "name": "head"
      }
    ]
  },
  {
    "name": "io.netty.util.concurrent.DefaultPromise",
    "fields": [
      {
        "name": "result"
      }
    ]
  },
  {
    "name": "io.netty.util.concurrent.SingleThreadEventExecutor",
    "fields": [
      {
        "name": "state"
      },
      {
        "name": "threadProperties"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.NativeLibraryUtil",
    "methods": [
      {
        "name": "loadLibrary",
        "parameterTypes": [
          "java.lang.String",
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueColdProducerFields",
    "fields": [
      {
        "name": "producerLimit"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields",
    "fields": [
      {
        "name": "consumerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields",
    "fields": [
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueConsumerIndexField",
    "fields": [
      {
        "name": "consumerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerIndexField",
    "fields": [
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField",
    "fields": [
      {
        "name": "producerLimit"
      }
    ]
  },
  {
    "name": "io.netty5.buffer.Buffer"
  },
  {
    "name": "io.reactivex.rxjava3.core.Flowable"
  },
  {
    "name": "io.smallrye.mutiny.Multi"
  },
  {
    "name": "io.undertow.websockets.WebSocketProtocolHandshakeHandler"
  },
  {
    "name": "io.vavr.control.Option"
  },
  {
    "name": "io.vavr.control.Try"
  },
  {
    "name": "jakarta.enterprise.concurrent.ManagedExecutorService"
  },
  {
    "name": "jakarta.enterprise.concurrent.ManagedScheduledExecutorService"
  },
  {
    "name": "jakarta.inject.Provider"
  },
  {
    "name": "jakarta.inject.Qualifier"
  },
  {
    "name": "jakarta.json.bind.Jsonb"
  },
  {
    "name": "jakarta.validation.Validator"
  },
  {
    "name": "jakarta.xml.bind.Binder"
  },
  {
    "name": "java.io.Closeable",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.io.Console",
    "methods": [
      {
        "name": "isTerminal",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.io.FileDescriptor"
  },
  {
    "name": "java.io.FilePermission"
  },
  {
    "name": "java.io.Serializable",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.Boolean",
    "methods": [
      {
        "name": "toboolean",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.Class",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "getRecordComponents",
        "parameterTypes": []
      },
      {
        "name": "of",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.lang.ClassLoader",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "defineClass",
        "parameterTypes": [
          "java.lang.String",
          "byte[]",
          "int",
          "int",
          "java.security.ProtectionDomain"
        ]
      }
    ]
  },
  {
    "name": "java.lang.Module",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.lang.Object",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.lang.ProcessHandle",
    "methods": [
      {
        "name": "current",
        "parameterTypes": []
      },
      {
        "name": "pid",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.Record",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.lang.RuntimePermission"
  },
  {
    "name": "java.lang.String",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.lang.Thread",
    "fields": [
      {
        "name": "threadLocalRandomProbe"
      }
    ]
  },
  {
    "name": "java.lang.Throwable",
    "allDeclaredFields": true
  },
  {
    "name": "java.lang.constant.Constable",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.invoke.TypeDescriptor$OfField",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.reflect.AnnotatedElement",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.reflect.GenericDeclaration",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.reflect.ParameterizedType",
    "methods": [
      {
        "name": "getActualTypeArguments",
        "parameterTypes": []
      },
      {
        "name": "getOwnerType",
        "parameterTypes": []
      },
      {
        "name": "getRawType",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.reflect.RecordComponent",
    "methods": [
      {
        "name": "getName",
        "parameterTypes": []
      },
      {
        "name": "getType",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.reflect.Type",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.lang.reflect.TypeVariable",
    "methods": [
      {
        "name": "getBounds",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.lang.reflect.WildcardType",
    "methods": [
      {
        "name": "getLowerBounds",
        "parameterTypes": []
      },
      {
        "name": "getUpperBounds",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "java.net.NetPermission"
  },
  {
    "name": "java.net.SocketOption"
  },
  {
    "name": "java.net.SocketPermission"
  },
  {
    "name": "java.net.StandardSocketOptions",
    "fields": [
      {
        "name": "IP_MULTICAST_IF"
      },
      {
        "name": "IP_MULTICAST_LOOP"
      },
      {
        "name": "IP_MULTICAST_TTL"
      }
    ]
  },
  {
    "name": "java.net.URLClassLoader",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.net.URLPermission",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "java.net.http.HttpClient"
  },
  {
    "name": "java.nio.Bits",
    "fields": [
      {
        "name": "MAX_MEMORY"
      },
      {
        "name": "UNALIGNED"
      }
    ]
  },
  {
    "name": "java.nio.Buffer",
    "fields": [
      {
        "name": "address"
      }
    ]
  },
  {
    "name": "java.nio.ByteBuffer",
    "methods": [
      {
        "name": "alignedSlice",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "java.nio.DirectByteBuffer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "long",
          "long"
        ]
      }
    ]
  },
  {
    "name": "java.nio.channels.FileChannel"
  },
  {
    "name": "java.nio.channels.NetworkChannel",
    "methods": [
      {
        "name": "getOption",
        "parameterTypes": [
          "java.net.SocketOption"
        ]
      },
      {
        "name": "setOption",
        "parameterTypes": [
          "java.net.SocketOption",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "java.nio.channels.spi.SelectorProvider",
    "methods": [
      {
        "name": "openServerSocketChannel",
        "parameterTypes": [
          "java.net.ProtocolFamily"
        ]
      },
      {
        "name": "openSocketChannel",
        "parameterTypes": [
          "java.net.ProtocolFamily"
        ]
      }
    ]
  },
  {
    "name": "java.security.AlgorithmParametersSpi"
  },
  {
    "name": "java.security.AllPermission"
  },
  {
    "name": "java.security.KeyStoreSpi"
  },
  {
    "name": "java.security.SecureClassLoader",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "java.security.SecureRandomParameters"
  },
  {
    "name": "java.security.SecurityPermission"
  },
  {
    "name": "java.security.interfaces.ECPrivateKey"
  },
  {
    "name": "java.security.interfaces.ECPublicKey"
  },
  {
    "name": "java.security.interfaces.RSAPrivateKey"
  },
  {
    "name": "java.security.interfaces.RSAPublicKey"
  },
  {
    "name": "java.sql.Date"
  },
  {
    "name": "java.sql.Timestamp"
  },
  {
    "name": "java.util.Date"
  },
  {
    "name": "java.util.EventListener",
    "queryAllPublicMethods": true
  },
  {
    "name": "java.util.PropertyPermission"
  },
  {
    "name": "java.util.concurrent.ForkJoinTask",
    "fields": [
      {
        "name": "aux"
      },
      {
        "name": "status"
      }
    ]
  },
  {
    "name": "java.util.concurrent.atomic.AtomicBoolean",
    "fields": [
      {
        "name": "value"
      }
    ]
  },
  {
    "name": "java.util.concurrent.atomic.AtomicMarkableReference",
    "fields": [
      {
        "name": "pair"
      }
    ]
  },
  {
    "name": "java.util.concurrent.atomic.AtomicReference",
    "fields": [
      {
        "name": "value"
      }
    ]
  },
  {
    "name": "java.util.concurrent.atomic.Striped64",
    "fields": [
      {
        "name": "base"
      },
      {
        "name": "cellsBusy"
      }
    ]
  },
  {
    "name": "java.util.concurrent.atomic.Striped64$Cell",
    "fields": [
      {
        "name": "value"
      }
    ]
  },
  {
    "name": "java.util.logging.LogManager"
  },
  {
    "name": "java.util.zip.Adler32",
    "methods": [
      {
        "name": "update",
        "parameterTypes": [
          "java.nio.ByteBuffer"
        ]
      }
    ]
  },
  {
    "name": "java.util.zip.CRC32",
    "methods": [
      {
        "name": "update",
        "parameterTypes": [
          "java.nio.ByteBuffer"
        ]
      }
    ]
  },
  {
    "name": "javax.annotation.Nonnull"
  },
  {
    "name": "javax.inject.Qualifier"
  },
  {
    "name": "javax.money.MonetaryAmount"
  },
  {
    "name": "javax.net.ssl.SSLEngine",
    "methods": [
      {
        "name": "getApplicationProtocol",
        "parameterTypes": []
      },
      {
        "name": "getHandshakeApplicationProtocol",
        "parameterTypes": []
      },
      {
        "name": "getHandshakeApplicationProtocolSelector",
        "parameterTypes": []
      },
      {
        "name": "setHandshakeApplicationProtocolSelector",
        "parameterTypes": [
          "java.util.function.BiFunction"
        ]
      }
    ]
  },
  {
    "name": "javax.net.ssl.SSLParameters",
    "methods": [
      {
        "name": "setApplicationProtocols",
        "parameterTypes": [
          "java.lang.String[]"
        ]
      }
    ]
  },
  {
    "name": "javax.security.auth.x500.X500Principal",
    "fields": [
      {
        "name": "thisX500Name"
      }
    ],
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "sun.security.x509.X500Name"
        ]
      }
    ]
  },
  {
    "name": "javax.smartcardio.CardPermission"
  },
  {
    "name": "jdk.crac.management.CRaCMXBean"
  },
  {
    "name": "jdk.internal.loader.ClassLoaders$AppClassLoader",
    "methods": [
      {
        "name": "clearCache",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "jdk.internal.loader.ClassLoaders$PlatformClassLoader",
    "methods": [
      {
        "name": "clearCache",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "jdk.internal.misc.Unsafe",
    "methods": [
      {
        "name": "getUnsafe",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "jdk.jfr.Event"
  },
  {
    "name": "kotlin.Metadata"
  },
  {
    "name": "kotlin.coroutines.Continuation"
  },
  {
    "name": "kotlinx.coroutines.flow.Flow"
  },
  {
    "name": "kotlinx.coroutines.reactor.MonoKt"
  },
  {
    "name": "kotlinx.serialization.cbor.Cbor"
  },
  {
    "name": "kotlinx.serialization.json.Json"
  },
  {
    "name": "kotlinx.serialization.protobuf.ProtoBuf"
  },
  {
    "name": "org.HdrHistogram$Histogram"
  },
  {
    "name": "org.HdrHistogram.Histogram"
  },
  {
    "name": "org.LatencyUtils$PauseDetector"
  },
  {
    "name": "org.LatencyUtils.PauseDetector"
  },
  {
    "name": "org.apache.commons.pool2.ObjectPool"
  },
  {
    "name": "org.apache.hc.client5.http.classic.HttpClient"
  },
  {
    "name": "org.apache.jasper.compiler.JspConfig"
  },
  {
    "name": "org.apache.logging.log4j.core.impl.Log4jContextFactory"
  },
  {
    "name": "org.apache.logging.log4j.spi.ExtendedLogger"
  },
  {
    "name": "org.apache.logging.slf4j.SLF4JProvider"
  },
  {
    "name": "org.apache.tomcat.websocket.server.WsHttpUpgradeHandler"
  },
  {
    "name": "org.crac.Core"
  },
  {
    "name": "org.eclipse.collections.api.list.ImmutableList"
  },
  {
    "name": "org.eclipse.core.runtime.FileLocator"
  },
  {
    "name": "org.eclipse.jetty.client.HttpClient"
  },
  {
    "name": "org.eclipse.jetty.ee10.websocket.server.JettyWebSocketServerContainer"
  },
  {
    "name": "org.glassfish.jersey.servlet.ServletContainer"
  },
  {
    "name": "org.jboss.logging.Logger"
  },
  {
    "name": "org.jmolecules.ddd.annotation.Identity"
  },
  {
    "name": "org.jmolecules.ddd.types.Association"
  },
  {
    "name": "org.jmolecules.spring.IdentifierToPrimitivesConverter"
  },
  {
    "name": "org.reactivestreams.Publisher"
  },
  {
    "name": "org.slf4j.Logger"
  },
  {
    "name": "org.slf4j.bridge.SLF4JBridgeHandler"
  },
  {
    "name": "org.slf4j.spi.LocationAwareLogger"
  },
  {
    "name": "org.springframework.aop.SpringProxy",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.TargetClassAware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "getTargetClass",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aop.framework.Advised",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "isFrozen",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.aop.framework.AopInfrastructureBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.framework.ProxyConfig",
    "allDeclaredFields": true,
    "methods": [
      {
        "name": "setProxyTargetClass",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.aop.framework.ProxyProcessorSupport",
    "allDeclaredFields": true,
    "methods": [
      {
        "name": "setOrder",
        "parameterTypes": [
          "int"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.aop.framework.autoproxy.InfrastructureAdvisorAutoProxyCreator",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.aop.scope.ScopedObject"
  },
  {
    "name": "org.springframework.aot.hint.annotation.Reflective",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.beans.factory.Aware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.BeanClassLoaderAware",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.BeanFactoryAware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.DisposableBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.FactoryBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.InitializingBean",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.annotation.Autowired",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.beans.factory.annotation.Qualifier",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.beans.factory.annotation.Value",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.beans.factory.config.BeanPostProcessor",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.ApplicationRunner",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.ClearCachesApplicationListener",
    "queryAllDeclaredConstructors": true,
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.Runner",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.SpringApplication",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.SpringBootConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.ansi.AnsiOutput$Enabled",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.AutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.AutoConfigurationPackage",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.AutoConfigurationPackages$BasePackages",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String[]"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.AutoConfigureAfter",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.AutoConfigureBefore",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.AutoConfigureOrder",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.BackgroundPreinitializer",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.EnableAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer",
    "queryAllDeclaredConstructors": true,
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.SpringBootApplication",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.aop.AopAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.codec.CodecProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnBean",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnClass",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnNotWarDeployment",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnProperty",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnResource",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnThreading",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.context.LifecycleProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.boot.autoconfigure.data.redis.RedisConnectionDetails",
          "org.springframework.beans.factory.ObjectProvider"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.redis.RedisConnectionConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "setUrl",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$DefaultCodecsConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration$JacksonCodecConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.info.ProjectInfoProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.integration.IntegrationPropertiesEnvironmentPostProcessor",
    "queryAllDeclaredConstructors": true,
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.netty.NettyProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.netty.NettyProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.reactor.ReactorProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.reactor.ReactorProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.reactor.netty.ReactorNettyConfigurations$ReactorResourceFactoryConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.reactor.netty.ReactorNettyProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.security.SecurityProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration$SpringBootWebFluxSecurityConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.ssl.SslProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.ssl.SslProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskExecutionProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$SimpleAsyncTaskExecutorBuilderConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.task.TaskExecutionProperties",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorBuilderConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$ThreadPoolTaskExecutorBuilderConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$SimpleAsyncTaskSchedulerBuilderConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.task.TaskSchedulingProperties",
          "org.springframework.beans.factory.ObjectProvider"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$TaskSchedulerBuilderConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$ThreadPoolTaskSchedulerBuilderConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.task.TaskSchedulingProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizer",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.transaction.TransactionProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.ServerProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "setPort",
        "parameterTypes": [
          "java.lang.Integer"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.WebProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "getResources",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.WebProperties$Resources",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "setAddMappings",
        "parameterTypes": [
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$NettyWebServerFactoryCustomizerConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration$AnnotationConfig",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryConfiguration$EmbeddedNetty",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration$EnableWebFluxConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties",
          "org.springframework.boot.autoconfigure.web.WebProperties",
          "org.springframework.boot.autoconfigure.web.ServerProperties",
          "org.springframework.beans.factory.ObjectProvider"
        ]
      },
      {
        "name": "localeContextResolver",
        "parameterTypes": []
      },
      {
        "name": "webFluxConversionService",
        "parameterTypes": []
      },
      {
        "name": "webFluxValidator",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration$WebFluxConfig",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.core.env.Environment",
          "org.springframework.boot.autoconfigure.web.WebProperties",
          "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties",
          "org.springframework.beans.factory.ListableBeanFactory",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider",
          "org.springframework.beans.factory.ObjectProvider"
        ]
      },
      {
        "name": "addFormatters",
        "parameterTypes": [
          "org.springframework.format.FormatterRegistry"
        ]
      },
      {
        "name": "addResourceHandlers",
        "parameterTypes": [
          "org.springframework.web.reactive.config.ResourceHandlerRegistry"
        ]
      },
      {
        "name": "configureArgumentResolvers",
        "parameterTypes": [
          "org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer"
        ]
      },
      {
        "name": "configureBlockingExecution",
        "parameterTypes": [
          "org.springframework.web.reactive.config.BlockingExecutionConfigurer"
        ]
      },
      {
        "name": "configureHttpMessageCodecs",
        "parameterTypes": [
          "org.springframework.http.codec.ServerCodecConfigurer"
        ]
      },
      {
        "name": "configureViewResolvers",
        "parameterTypes": [
          "org.springframework.web.reactive.config.ViewResolverRegistry"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration$WelcomePageConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.web.ServerProperties",
          "org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.autoconfigure.web.ServerProperties"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorFactoryConfiguration$ReactorNetty",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration$WebClientCodecsConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.builder.ParentContextCloserApplicationListener",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.logging.DeferredLogFactory"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.ContextIdApplicationContextInitializer",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.FileEncodingApplicationListener",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.AnsiOutputApplicationListener",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.logging.DeferredLogFactory",
          "org.springframework.boot.ConfigurableBootstrapContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.ConfigDataNotFoundAction",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.ConfigDataProperties",
    "queryAllDeclaredConstructors": true,
    "fields": [
      {
        "name": "this$0"
      }
    ],
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.ConfigTreeConfigDataLoader",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.core.io.ResourceLoader"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.DelegatingApplicationContextInitializer",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.DelegatingApplicationListener",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.StandardConfigDataLoader",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.config.StandardConfigDataLocationResolver",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.logging.DeferredLogFactory",
          "org.springframework.boot.context.properties.bind.Binder",
          "org.springframework.core.io.ResourceLoader"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.event.EventPublishingRunListener",
    "queryAllDeclaredConstructors": true,
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.SpringApplication",
          "java.lang.String[]"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.logging.LoggingApplicationListener",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.context.properties.ConfigurationProperties",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.context.properties.EnableConfigurationProperties",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.context.properties.bind.Name",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.env.EnvironmentPostProcessorApplicationListener",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.env.PropertiesPropertySourceLoader",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.env.RandomValuePropertySourceEnvironmentPostProcessor",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.boot.logging.DeferredLogFactory"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.env.YamlPropertySourceLoader",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.loader.launch.LaunchedClassLoader",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "clearCache",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.loader.net.protocol.jar.JarUrlClassLoader",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.boot.logging.java.JavaLoggingSystem$Factory",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.logging.java.JavaLoggingSystem.Factory"
  },
  {
    "name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem$Factory",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem.Factory"
  },
  {
    "name": "org.springframework.boot.logging.logback.ApplicationNameConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.logging.logback.ColorConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.logging.logback.LogbackLoggingSystem$Factory",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.logging.logback.LogbackLoggingSystem.Factory"
  },
  {
    "name": "org.springframework.boot.reactor.ReactorEnvironmentPostProcessor",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.validation.beanvalidation.MethodValidationExcludeFilter",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContextFactory",
    "queryAllDeclaredConstructors": true,
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.boot.web.servlet.context.ServletWebServerApplicationContextFactory",
    "queryAllDeclaredConstructors": true,
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.context.ApplicationContextAware",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.context.ApplicationEventPublisherAware",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.context.ApplicationListener",
    "queryAllPublicMethods": true,
    "fields": [
      {
        "name": "supportsAsyncExecution"
      }
    ]
  },
  {
    "name": "org.springframework.context.annotation.Bean",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.ComponentScan",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.Conditional",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.Configuration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.ConfigurationClassEnhancer$EnhancedConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.Import",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.ImportRuntimeHints",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.Lazy",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.Primary",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.context.annotation.Scope",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.core.DecoratingProxy",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.core.Ordered",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.core.annotation.AliasFor",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.core.annotation.Order",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.core.io.Resource",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "java.lang.String"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.core.io.support.PropertiesLoaderSupport",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "setIgnoreResourceNotFound",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setLocations",
        "parameterTypes": [
          "org.springframework.core.io.Resource[]"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.annotation.Id",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.annotation.Persistent",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.convert.CustomConversions",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.RedisCustomConversions"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.RedisCustomConversions"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.RedisCustomConversions"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.RedisCustomConversions"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.convert.EntityConverter",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.convert.EntityReader",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.convert.EntityWriter",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.convert.ReadingConverter",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.convert.WritingConverter",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.keyvalue.annotation.KeySpace",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.keyvalue.core.KeyValueAdapter",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.keyvalue.core.KeyValueOperations",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisKeyValueTemplate"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisKeyValueTemplate"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisKeyValueTemplate"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisKeyValueTemplate"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.keyvalue.repository.KeyValueRepository",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean",
    "allDeclaredFields": true,
    "methods": [
      {
        "name": "setKeyValueOperations",
        "parameterTypes": [
          "org.springframework.data.keyvalue.core.KeyValueOperations"
        ]
      },
      {
        "name": "setMappingContext",
        "parameterTypes": [
          "org.springframework.data.mapping.context.MappingContext"
        ]
      },
      {
        "name": "setQueryCreator",
        "parameterTypes": [
          "java.lang.Class"
        ]
      },
      {
        "name": "setQueryType",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.keyvalue.repository.support.SimpleKeyValueRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.repository.core.EntityInformation",
          "org.springframework.data.keyvalue.core.KeyValueOperations"
        ]
      },
      {
        "name": "deleteById",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "existsById",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "findAll",
        "parameterTypes": []
      },
      {
        "name": "save",
        "parameterTypes": [
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.mapping.PersistentPropertyAccessor"
  },
  {
    "name": "org.springframework.data.mapping.context.MappingContext",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.mapping.RedisMappingContext"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "org.springframework.data.redis.core.mapping.RedisMappingContext"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "org.springframework.data.redis.core.mapping.RedisMappingContext"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "org.springframework.data.redis.core.mapping.RedisMappingContext"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.mapping.model.ClassGeneratingEntityInstantiator$ObjectInstantiator"
  },
  {
    "name": "org.springframework.data.querydsl.QuerydslPredicateExecutor"
  },
  {
    "name": "org.springframework.data.querydsl.ReactiveQuerydslPredicateExecutor"
  },
  {
    "name": "org.springframework.data.redis.connection.DefaultedRedisConnection",
    "methods": [
      {
        "name": "del",
        "parameterTypes": [
          "byte[][]"
        ]
      },
      {
        "name": "hGetAll",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "hMSet",
        "parameterTypes": [
          "byte[]",
          "java.util.Map"
        ]
      },
      {
        "name": "sAdd",
        "parameterTypes": [
          "byte[]",
          "byte[][]"
        ]
      },
      {
        "name": "sInter",
        "parameterTypes": [
          "byte[][]"
        ]
      },
      {
        "name": "sMembers",
        "parameterTypes": [
          "byte[]"
        ]
      },
      {
        "name": "sRem",
        "parameterTypes": [
          "byte[]",
          "byte[][]"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.RedisHash",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.redis.core.RedisKeyValueAdapter",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisOperations",
          "org.springframework.data.redis.core.convert.RedisConverter"
        ]
      },
      {
        "name": "setEnableKeyspaceEvents",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisKeyValueAdapter$EnableKeyspaceEvents"
        ]
      },
      {
        "name": "setKeyspaceNotificationsConfigParameter",
        "parameterTypes": [
          "java.lang.String"
        ]
      },
      {
        "name": "setShadowCopy",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisKeyValueAdapter$ShadowCopy"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.RedisKeyValueAdapter$EnableKeyspaceEvents",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.redis.core.RedisKeyValueAdapter$ShadowCopy",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.redis.core.RedisKeyValueTemplate",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisKeyValueAdapter",
          "org.springframework.data.redis.core.mapping.RedisMappingContext"
        ]
      },
      {
        "name": "toKeyValueOperations",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.RedisOperations",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisTemplate"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisTemplate"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisTemplate"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisTemplate"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.RedisTemplate",
    "methods": [
      {
        "name": "toRedisOperations",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.convert.KeyspaceConfiguration",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.redis.core.convert.MappingConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.index.ConfigurableIndexDefinitionProvider",
          "org.springframework.data.redis.core.convert.KeyspaceConfiguration"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.convert.MappingRedisConverter",
    "allDeclaredFields": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.mapping.RedisMappingContext"
        ]
      },
      {
        "name": "setCustomConversions",
        "parameterTypes": [
          "org.springframework.data.convert.CustomConversions"
        ]
      },
      {
        "name": "setReferenceResolver",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.ReferenceResolver"
        ]
      },
      {
        "name": "toRedisConverter",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.convert.RedisConverter",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.MappingRedisConverter"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.MappingRedisConverter"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.MappingRedisConverter"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.MappingRedisConverter"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.convert.RedisCustomConversions",
    "methods": [
      {
        "name": "toCustomConversions",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.convert.ReferenceResolver",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.ReferenceResolverImpl"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.ReferenceResolverImpl"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.ReferenceResolverImpl"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.ReferenceResolverImpl"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.convert.ReferenceResolverImpl",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.RedisOperations"
        ]
      },
      {
        "name": "toReferenceResolver",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.index.ConfigurableIndexDefinitionProvider",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.index.IndexConfiguration"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "org.springframework.data.redis.core.index.IndexConfiguration"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "org.springframework.data.redis.core.index.IndexConfiguration"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "org.springframework.data.redis.core.index.IndexConfiguration"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.index.IndexConfiguration",
    "methods": [
      {
        "name": "toConfigurableIndexDefinitionProvider",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.core.index.Indexed",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.redis.core.mapping.RedisMappingContext",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.redis.core.convert.MappingConfiguration"
        ]
      },
      {
        "name": "toMappingContext",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.repository.query.RedisPartTreeQuery",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.repository.query.QueryMethod",
          "org.springframework.data.repository.query.QueryMethodEvaluationContextProvider",
          "org.springframework.data.keyvalue.core.KeyValueOperations",
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.repository.query.RedisQueryCreator",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.repository.query.parser.PartTree",
          "org.springframework.data.repository.query.ParameterAccessor"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.redis.repository.support.RedisRepositoryFactoryBean",
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Class"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.repository.CrudRepository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "count",
        "parameterTypes": []
      },
      {
        "name": "delete",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "deleteAll",
        "parameterTypes": []
      },
      {
        "name": "deleteAll",
        "parameterTypes": [
          "java.lang.Iterable"
        ]
      },
      {
        "name": "deleteAllById",
        "parameterTypes": [
          "java.lang.Iterable"
        ]
      },
      {
        "name": "deleteById",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "existsById",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "findAll",
        "parameterTypes": []
      },
      {
        "name": "findAllById",
        "parameterTypes": [
          "java.lang.Iterable"
        ]
      },
      {
        "name": "findById",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "save",
        "parameterTypes": [
          "java.lang.Object"
        ]
      },
      {
        "name": "saveAll",
        "parameterTypes": [
          "java.lang.Iterable"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.repository.NoRepositoryBean",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.repository.Repository",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.repository.config.PropertiesBasedNamedQueriesFactoryBean",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.repository.core.NamedQueries",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.data.repository.core.support.PropertiesBasedNamedQueries"
        ]
      },
      {
        "name": "from",
        "parameterTypes": [
          "org.springframework.data.repository.core.support.PropertiesBasedNamedQueries"
        ]
      },
      {
        "name": "of",
        "parameterTypes": [
          "org.springframework.data.repository.core.support.PropertiesBasedNamedQueries"
        ]
      },
      {
        "name": "valueOf",
        "parameterTypes": [
          "org.springframework.data.repository.core.support.PropertiesBasedNamedQueries"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.repository.core.support.PropertiesBasedNamedQueries",
    "methods": [
      {
        "name": "toNamedQueries",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport",
    "allDeclaredFields": true,
    "methods": [
      {
        "name": "setLazyInit",
        "parameterTypes": [
          "boolean"
        ]
      },
      {
        "name": "setNamedQueries",
        "parameterTypes": [
          "org.springframework.data.repository.core.NamedQueries"
        ]
      },
      {
        "name": "setQueryLookupStrategyKey",
        "parameterTypes": [
          "org.springframework.data.repository.query.QueryLookupStrategy$Key"
        ]
      },
      {
        "name": "setRepositoryFragments",
        "parameterTypes": [
          "org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryFactoryInformation",
    "queryAllPublicMethods": true
  },
  {
    "name": "org.springframework.data.repository.core.support.RepositoryFragmentsFactoryBean",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.data.repository.query.QueryByExampleExecutor"
  },
  {
    "name": "org.springframework.data.repository.query.QueryLookupStrategy$Key",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.data.repository.query.ReactiveQueryByExampleExecutor"
  },
  {
    "name": "org.springframework.data.util.CustomCollections$EclipseCollections",
    "queryAllDeclaredConstructors": true,
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.util.CustomCollections$VavrCollections",
    "queryAllDeclaredConstructors": true,
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.data.util.CustomCollections.EclipseCollections"
  },
  {
    "name": "org.springframework.data.util.CustomCollections.VavrCollections"
  },
  {
    "name": "org.springframework.data.util.KotlinBeanInfoFactory",
    "queryAllPublicConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.http.codec.ClientCodecConfigurer"
  },
  {
    "name": "org.springframework.http.codec.ServerCodecConfigurer"
  },
  {
    "name": "org.springframework.http.codec.support.DefaultClientCodecConfigurer"
  },
  {
    "name": "org.springframework.http.codec.support.DefaultServerCodecConfigurer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.lang.NonNullApi"
  },
  {
    "name": "org.springframework.lang.Nullable"
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureExpiredEvent",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureLockedEvent",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureProviderNotFoundEvent",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureProxyUntrustedEvent",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "org.springframework.security.core.Authentication",
          "org.springframework.security.core.AuthenticationException"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.security.config.annotation.web.reactive.ServerHttpSecurityConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.security.config.annotation.web.reactive.WebFluxSecurityConfiguration",
    "allDeclaredFields": true,
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository"
  },
  {
    "name": "org.springframework.stereotype.Component",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.stereotype.Controller",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.stereotype.Indexed",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.stereotype.Repository",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.stereotype.Service",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.transaction.interceptor.TransactionalProxy",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.util.Assert"
  },
  {
    "name": "org.springframework.web.bind.annotation.CrossOrigin",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.bind.annotation.GetMapping",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.bind.annotation.Mapping",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.bind.annotation.PostMapping",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.bind.annotation.RequestMapping",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.bind.annotation.ResponseBody",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.bind.annotation.RestController",
    "queryAllDeclaredMethods": true
  },
  {
    "name": "org.springframework.web.reactive.DispatcherHandler"
  },
  {
    "name": "org.springframework.web.reactive.config.DelegatingWebFluxConfiguration",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "configurePathMatching",
        "parameterTypes": [
          "org.springframework.web.reactive.config.PathMatchConfigurer"
        ]
      },
      {
        "name": "setConfigurers",
        "parameterTypes": [
          "java.util.List"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.config.WebFluxConfigurationSupport",
    "queryAllDeclaredMethods": true,
    "methods": [
      {
        "name": "handlerFunctionAdapter",
        "parameterTypes": []
      },
      {
        "name": "requestMappingHandlerAdapter",
        "parameterTypes": [
          "org.springframework.core.ReactiveAdapterRegistry",
          "org.springframework.http.codec.ServerCodecConfigurer",
          "org.springframework.format.support.FormattingConversionService",
          "org.springframework.validation.Validator"
        ]
      },
      {
        "name": "requestMappingHandlerMapping",
        "parameterTypes": [
          "org.springframework.web.reactive.accept.RequestedContentTypeResolver"
        ]
      },
      {
        "name": "resourceHandlerMapping",
        "parameterTypes": [
          "org.springframework.web.reactive.resource.ResourceUrlProvider"
        ]
      },
      {
        "name": "resourceUrlProvider",
        "parameterTypes": []
      },
      {
        "name": "responseBodyResultHandler",
        "parameterTypes": [
          "org.springframework.core.ReactiveAdapterRegistry",
          "org.springframework.http.codec.ServerCodecConfigurer",
          "org.springframework.web.reactive.accept.RequestedContentTypeResolver"
        ]
      },
      {
        "name": "responseEntityResultHandler",
        "parameterTypes": [
          "org.springframework.core.ReactiveAdapterRegistry",
          "org.springframework.http.codec.ServerCodecConfigurer",
          "org.springframework.web.reactive.accept.RequestedContentTypeResolver"
        ]
      },
      {
        "name": "responseStatusExceptionHandler",
        "parameterTypes": []
      },
      {
        "name": "routerFunctionMapping",
        "parameterTypes": [
          "org.springframework.http.codec.ServerCodecConfigurer"
        ]
      },
      {
        "name": "serverCodecConfigurer",
        "parameterTypes": []
      },
      {
        "name": "serverResponseResultHandler",
        "parameterTypes": [
          "org.springframework.http.codec.ServerCodecConfigurer"
        ]
      },
      {
        "name": "setApplicationContext",
        "parameterTypes": [
          "org.springframework.context.ApplicationContext"
        ]
      },
      {
        "name": "simpleHandlerAdapter",
        "parameterTypes": []
      },
      {
        "name": "viewResolutionResultHandler",
        "parameterTypes": [
          "org.springframework.core.ReactiveAdapterRegistry",
          "org.springframework.web.reactive.accept.RequestedContentTypeResolver"
        ]
      },
      {
        "name": "webFluxAdapterRegistry",
        "parameterTypes": []
      },
      {
        "name": "webFluxContentTypeResolver",
        "parameterTypes": []
      },
      {
        "name": "webFluxWebSocketHandlerAdapter",
        "parameterTypes": []
      },
      {
        "name": "webHandler",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.config.WebFluxConfigurer",
    "queryAllDeclaredMethods": true,
    "queryAllPublicMethods": true,
    "methods": [
      {
        "name": "addCorsMappings",
        "parameterTypes": [
          "org.springframework.web.reactive.config.CorsRegistry"
        ]
      },
      {
        "name": "configureContentTypeResolver",
        "parameterTypes": [
          "org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder"
        ]
      },
      {
        "name": "configurePathMatching",
        "parameterTypes": [
          "org.springframework.web.reactive.config.PathMatchConfigurer"
        ]
      },
      {
        "name": "getMessageCodesResolver",
        "parameterTypes": []
      },
      {
        "name": "getValidator",
        "parameterTypes": []
      },
      {
        "name": "getWebSocketService",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.function.server.HandlerFunction",
    "methods": [
      {
        "name": "handle",
        "parameterTypes": [
          "org.springframework.web.reactive.function.server.ServerRequest"
        ]
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.method.AbstractHandlerMethodMapping$PreFlightAmbiguousMatchHandler",
    "methods": [
      {
        "name": "handle",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping$HttpOptionsHandler",
    "methods": [
      {
        "name": "handle",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "org.springframework.web.servlet.DispatcherServlet"
  },
  {
    "name": "org.synchronoss.cloud.nio.multipart.NioMultipartParser"
  },
  {
    "name": "org.thymeleaf.spring6.SpringTemplateEngine"
  },
  {
    "name": "org.yaml.snakeyaml.Yaml"
  },
  {
    "name": "reactor.core.Disposables$SwapDisposable",
    "fields": [
      {
        "name": "inner"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.BaseSubscriber",
    "fields": [
      {
        "name": "subscription"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.EmitterProcessor",
    "fields": [
      {
        "name": "error"
      },
      {
        "name": "s"
      },
      {
        "name": "subscribers"
      },
      {
        "name": "upstreamDisposable"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FlatMapTracker",
    "fields": [
      {
        "name": "size"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.Flux"
  },
  {
    "name": "reactor.core.publisher.FluxArray$ArraySubscription",
    "fields": [
      {
        "name": "requested"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxConcatMapNoPrefetch$FluxConcatMapNoPrefetchSubscriber",
    "fields": [
      {
        "name": "error"
      },
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxCreate$BaseSink",
    "fields": [
      {
        "name": "disposable"
      },
      {
        "name": "requestConsumer"
      },
      {
        "name": "requested"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxCreate$BufferAsyncSink",
    "fields": [
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxCreate$SerializedFluxSink",
    "fields": [
      {
        "name": "error"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxDefaultIfEmpty$DefaultIfEmptySubscriber",
    "fields": [
      {
        "name": "fallbackValue"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxDoFinally$DoFinallySubscriber",
    "fields": [
      {
        "name": "once"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxFirstWithSignal$RaceCoordinator",
    "fields": [
      {
        "name": "winner"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxFlatMap$FlatMapInner",
    "fields": [
      {
        "name": "s"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxFlatMap$FlatMapMain",
    "fields": [
      {
        "name": "error"
      },
      {
        "name": "requested"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxGroupBy$GroupByMain",
    "fields": [
      {
        "name": "cancelled"
      },
      {
        "name": "error"
      },
      {
        "name": "groupCount"
      },
      {
        "name": "requested"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxGroupBy$UnicastGroupedFlux",
    "fields": [
      {
        "name": "actual"
      },
      {
        "name": "once"
      },
      {
        "name": "parent"
      },
      {
        "name": "requested"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxInterval$IntervalRunnable",
    "fields": [
      {
        "name": "requested"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxIterable$IterableSubscription",
    "fields": [
      {
        "name": "requested"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxPublish$PubSubInner",
    "fields": [
      {
        "name": "requested"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxPublish$PublishSubscriber",
    "fields": [
      {
        "name": "error"
      },
      {
        "name": "state"
      },
      {
        "name": "subscribers"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxPublishOn$PublishOnConditionalSubscriber",
    "fields": [
      {
        "name": "discardGuard"
      },
      {
        "name": "requested"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxRepeatPredicate$RepeatPredicateSubscriber",
    "fields": [
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxReplay$ReplaySubscriber",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber",
    "fields": [
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxTakeUntilOther$TakeUntilMainSubscriber",
    "fields": [
      {
        "name": "main"
      },
      {
        "name": "other"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxWindowPredicate$WindowFlux",
    "fields": [
      {
        "name": "actual"
      },
      {
        "name": "once"
      },
      {
        "name": "parent"
      },
      {
        "name": "requested"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain",
    "fields": [
      {
        "name": "cancelled"
      },
      {
        "name": "error"
      },
      {
        "name": "requested"
      },
      {
        "name": "windowCount"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxZip$ZipCoordinator",
    "fields": [
      {
        "name": "error"
      },
      {
        "name": "requested"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.FluxZip$ZipInner",
    "fields": [
      {
        "name": "s"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.LambdaMonoSubscriber",
    "fields": [
      {
        "name": "subscription"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.LambdaSubscriber",
    "fields": [
      {
        "name": "subscription"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoCacheTime",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoCacheTime$CoordinatorSubscriber",
    "fields": [
      {
        "name": "subscribers"
      },
      {
        "name": "subscription"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoCallable$MonoCallableSubscription",
    "fields": [
      {
        "name": "requestedOnce"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoCreate$DefaultMonoSink",
    "fields": [
      {
        "name": "disposable"
      },
      {
        "name": "requestConsumer"
      },
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoDelay$MonoDelayRunnable",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoDelayUntil$DelayUntilCoordinator",
    "fields": [
      {
        "name": "error"
      },
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoFilterWhen$MonoFilterWhenMain",
    "fields": [
      {
        "name": "asyncFilter"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoFlatMap$FlatMapMain",
    "fields": [
      {
        "name": "second"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain",
    "fields": [
      {
        "name": "inner"
      },
      {
        "name": "requested"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoNext$NextSubscriber",
    "fields": [
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoPublishOn$PublishOnSubscriber",
    "fields": [
      {
        "name": "future"
      },
      {
        "name": "value"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoWhen$WhenCoordinator",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoWhen$WhenInner",
    "fields": [
      {
        "name": "s"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoZip$ZipCoordinator",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.MonoZip$ZipInner",
    "fields": [
      {
        "name": "s"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.Operators$BaseFluxToMonoOperator",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.Operators$DeferredSubscription",
    "fields": [
      {
        "name": "requested"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.Operators$MonoInnerProducerBase",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.Operators$MonoSubscriber",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.Operators$MultiSubscriptionSubscriber",
    "fields": [
      {
        "name": "missedProduced"
      },
      {
        "name": "missedRequested"
      },
      {
        "name": "missedSubscription"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.Operators$ScalarSubscription",
    "fields": [
      {
        "name": "once"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.SinkEmptyMulticast",
    "fields": [
      {
        "name": "subscribers"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.SinkManyBestEffort",
    "fields": [
      {
        "name": "subscribers"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.SinkManyEmitterProcessor",
    "fields": [
      {
        "name": "error"
      },
      {
        "name": "s"
      },
      {
        "name": "subscribers"
      },
      {
        "name": "upstreamDisposable"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.SinkManyReplayProcessor",
    "fields": [
      {
        "name": "subscribers"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.SinkManyReplayProcessor$ReplayInner",
    "fields": [
      {
        "name": "requested"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.publisher.SinksSpecs$AbstractSerializedSink",
    "fields": [
      {
        "name": "lockedAt"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.core.scheduler.BoundedElasticScheduler",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.scheduler.BoundedElasticScheduler$BoundedServices",
    "fields": [
      {
        "name": "busyStates"
      }
    ]
  },
  {
    "name": "reactor.core.scheduler.BoundedElasticScheduler$BoundedState",
    "fields": [
      {
        "name": "markCount"
      }
    ]
  },
  {
    "name": "reactor.core.scheduler.DelegateServiceScheduler",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.scheduler.ParallelScheduler",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.scheduler.PeriodicWorkerTask",
    "fields": [
      {
        "name": "future"
      },
      {
        "name": "parent"
      }
    ]
  },
  {
    "name": "reactor.core.scheduler.SchedulerTask",
    "fields": [
      {
        "name": "future"
      },
      {
        "name": "parent"
      }
    ]
  },
  {
    "name": "reactor.core.scheduler.SingleScheduler",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.core.scheduler.WorkerTask",
    "fields": [
      {
        "name": "future"
      },
      {
        "name": "parent"
      },
      {
        "name": "thread"
      }
    ]
  },
  {
    "name": "reactor.netty.channel.ChannelOperations",
    "fields": [
      {
        "name": "outboundSubscription"
      }
    ]
  },
  {
    "name": "reactor.netty.channel.ChannelOperationsHandler",
    "methods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelInactive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "channelWritabilityChanged",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "reactor.netty.channel.FluxReceive",
    "fields": [
      {
        "name": "receiverCancel"
      }
    ]
  },
  {
    "name": "reactor.netty.channel.MonoSendMany$SendManyInner",
    "fields": [
      {
        "name": "s"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.netty.http.Cookies",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.netty.http.HttpOperations",
    "fields": [
      {
        "name": "statusAndHeadersSent"
      }
    ]
  },
  {
    "name": "reactor.netty.http.client.WebsocketClientOperations",
    "fields": [
      {
        "name": "closeSent"
      }
    ]
  },
  {
    "name": "reactor.netty.http.server.HttpServerResponse"
  },
  {
    "name": "reactor.netty.internal.shaded.reactor.pool.AbstractPool$AbstractPooledRef",
    "fields": [
      {
        "name": "state"
      }
    ]
  },
  {
    "name": "reactor.netty.internal.shaded.reactor.pool.AllocationStrategies$SizeBasedAllocationStrategy",
    "fields": [
      {
        "name": "permits"
      }
    ]
  },
  {
    "name": "reactor.netty.internal.shaded.reactor.pool.SimpleDequePool",
    "fields": [
      {
        "name": "acquired"
      },
      {
        "name": "idleResources"
      },
      {
        "name": "idleSize"
      },
      {
        "name": "pending"
      },
      {
        "name": "pendingSize"
      },
      {
        "name": "wip"
      }
    ]
  },
  {
    "name": "reactor.netty.internal.shaded.reactor.pool.SimpleDequePool$QueuePoolRecyclerInner",
    "fields": [
      {
        "name": "once"
      }
    ]
  },
  {
    "name": "reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer"
  },
  {
    "name": "reactor.netty.tcp.SslProvider$SslReadHandler",
    "methods": [
      {
        "name": "channelActive",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "channelReadComplete",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext"
        ]
      },
      {
        "name": "userEventTriggered",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "reactor.netty.transport.ServerTransport$Acceptor",
    "methods": [
      {
        "name": "channelRead",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Object"
        ]
      },
      {
        "name": "exceptionCaught",
        "parameterTypes": [
          "io.netty.channel.ChannelHandlerContext",
          "java.lang.Throwable"
        ]
      }
    ]
  },
  {
    "name": "reactor.netty.transport.ServerTransport$AcceptorInitializer"
  },
  {
    "name": "reactor.netty.transport.TransportConfig$TransportChannelInitializer"
  },
  {
    "name": "reactor.netty.transport.TransportConnector$MonoChannelPromise",
    "fields": [
      {
        "name": "result"
      }
    ]
  },
  {
    "name": "reactor.netty5.http.server.HttpServerResponse"
  },
  {
    "name": "reactor.tools.agent.ReactorDebugAgent"
  },
  {
    "name": "reactor.util.concurrent.MpscLinkedQueue",
    "fields": [
      {
        "name": "consumerNode"
      },
      {
        "name": "producerNode"
      }
    ]
  },
  {
    "name": "reactor.util.concurrent.MpscLinkedQueue$LinkedQueueNode",
    "fields": [
      {
        "name": "next"
      }
    ]
  },
  {
    "name": "reactor.util.concurrent.SpscArrayQueueConsumer",
    "fields": [
      {
        "name": "consumerIndex"
      }
    ]
  },
  {
    "name": "reactor.util.concurrent.SpscArrayQueueProducer",
    "fields": [
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "reactor.util.concurrent.SpscLinkedArrayQueue",
    "fields": [
      {
        "name": "consumerIndex"
      },
      {
        "name": "producerIndex"
      }
    ]
  },
  {
    "name": "reactor.util.lang.NonNullApi"
  },
  {
    "name": "scala.Option"
  },
  {
    "name": "sun.misc.Unsafe",
    "fields": [
      {
        "name": "theUnsafe"
      }
    ],
    "methods": [
      {
        "name": "copyMemory",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "getAndAddLong",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "long"
        ]
      },
      {
        "name": "getAndSetObject",
        "parameterTypes": [
          "java.lang.Object",
          "long",
          "java.lang.Object"
        ]
      },
      {
        "name": "invokeCleaner",
        "parameterTypes": [
          "java.nio.ByteBuffer"
        ]
      },
      {
        "name": "storeFence",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.nio.ch.SelectorImpl",
    "fields": [
      {
        "name": "publicSelectedKeys"
      },
      {
        "name": "selectedKeys"
      }
    ]
  },
  {
    "name": "sun.security.pkcs12.PKCS12KeyStore",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.pkcs12.PKCS12KeyStore$DualFormatPKCS12",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.DSA$SHA224withDSA",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.DSA$SHA256withDSA",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.JavaKeyStore$DualFormatJKS",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.JavaKeyStore$JKS",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.MD5",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.NativePRNG",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      },
      {
        "name": "<init>",
        "parameterTypes": [
          "java.security.SecureRandomParameters"
        ]
      }
    ]
  },
  {
    "name": "sun.security.provider.SHA",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.SHA2$SHA224",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.SHA2$SHA256",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.SHA5$SHA384",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.SHA5$SHA512",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.X509Factory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.provider.certpath.PKIXCertPathValidator",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.rsa.PSSParameters",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.rsa.RSAKeyFactory$Legacy",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.rsa.RSAPSSSignature",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.rsa.RSASignature$SHA224withRSA",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.rsa.RSASignature$SHA256withRSA",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.ssl.KeyManagerFactoryImpl$SunX509",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.ssl.SSLContextImpl$DefaultSSLContext",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.ssl.SSLContextImpl$TLSContext",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.ssl.TrustManagerFactoryImpl$PKIXFactory",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "sun.security.util.ObjectIdentifier"
  },
  {
    "name": "sun.security.x509.AuthorityInfoAccessExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.AuthorityKeyIdentifierExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.BasicConstraintsExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.CRLDistributionPointsExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.CertificateExtensions"
  },
  {
    "name": "sun.security.x509.CertificatePoliciesExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.ExtendedKeyUsageExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.IssuerAlternativeNameExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.KeyUsageExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.NetscapeCertTypeExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.PrivateKeyUsageExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.SubjectAlternativeNameExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  },
  {
    "name": "sun.security.x509.SubjectKeyIdentifierExtension",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.Boolean",
          "java.lang.Object"
        ]
      }
    ]
  }
]
